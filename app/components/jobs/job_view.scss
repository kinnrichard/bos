/**
 * Job View Component
 * 
 * The main job detail page showing a single job with its tasks.
 * Displays the job title, status controls, and task management interface.
 * 
 * Structure:
 * .job-view
 *   .job-title-section     - Large editable job title
 *   .tasks-container       - Scrollable task list area
 *     .tasks-list         - Container for all tasks
 *       .task-wrapper     - Individual task with subtasks
 *       .new-task-wrapper - Placeholder for adding new tasks
 *   .job-popover          - Status/assignment dropdown (positioned absolutely)
 * 
 * Features:
 * - Inline editing of job title (contenteditable)
 * - Task status management with dropdown
 * - Drag and drop task reordering
 * - Subtask support
 * - Time tracking display
 * - Assignee management
 * 
 * States:
 * - Task states: new, in_progress, paused, completed, cancelled
 * - Job priorities: critical, high, normal, low, proactive_followup
 * 
 * Related Components:
 * - HeaderJobController: Manages the status bubble in toolbar
 * - JobController: Handles all job and task interactions
 * 
 * @see app/views/jobs/show_view.rb
 * @see app/javascript/controllers/job_controller.js
 */

// Main job view container
.job-view {
  height: 100%;
  display: flex;
  flex-direction: column;
  background-color: #000000;
  
  // @dnd-kit drag cursor styles
  .task-wrapper {
    cursor: grab;
    
    &.dragging {
      cursor: grabbing;
    }
  }
  
  .task-item {
    cursor: grab;
    touch-action: none;
    user-select: none;
    
    &:active {
      cursor: grabbing;
    }
  }
  
  .task-title {
    cursor: text !important;
    user-select: text;
  }
}

// Job title section
.job-title-section {
  flex: 0 0 auto; // Don't grow, prevents huge gap issue
}

// Job title styling - inherits base h1 styles with editable behavior
.job-title {
  // Inherits font-size, font-weight, color from base h1 styles
  padding: 8px 0;
  border: none;
  background: none;
  outline: none;
  display: inline-block;
  cursor: text;
  
  &:focus {
    // No underline, just ibeam cursor
  }
  
  // Show placeholder when empty
  &:empty::before {
    content: attr(data-placeholder);
    color: #999;
    font-weight: normal;
  }
  
  // Saving state
  &.saving {
    opacity: 0.6;
    cursor: wait;
  }
}


// Tasks container
.tasks-container {
  flex: 1;
  overflow-y: auto;
  overflow-x: visible; // Allow dropdowns to extend horizontally
  padding: 24px 32px;
  background-color: #000000;
  position: relative;
  z-index: auto; // Don't create stacking context
}

.tasks-list {
  max-width: 100%;
  position: relative;
  z-index: auto; // Don't create stacking context
}

// Task wrapper for drag and drop
.task-wrapper {
  position: relative;
  z-index: auto; // Don't create stacking context by default
  
  // When contains a task with open dropdown, lift it above others
  &:has([data-dropdown-open="true"]) {
    z-index: 1000 !important;
  }
}

// Task item - unified for all tasks regardless of depth
.task-item {
  display: flex;
  align-items: flex-start;
  padding: 4px !important;
  border: none !important;
  border-radius: 8px !important;
  background: none !important;
  background-color: transparent !important;
  gap: 12px;
  transition: opacity 0.2s, transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  cursor: default;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  will-change: transform; // Optimize for animations
  position: relative;
  z-index: 1; // Base z-index for all tasks
  
  // When this task has an open dropdown, lift it above others
  &:has([data-dropdown-open="true"]) {
    z-index: 1000 !important;
  }
  
  // Smooth transitions for FLIP animations
  &[data-flip-animating="true"] {
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  &.completed {
    // Don't apply opacity to the entire task to avoid affecting dropdown
    .task-title,
    .task-content,
    .task-assignee,
    .task-timer,
    .add-subtask-button {
      opacity: 0.75;
    }
    
    .task-title {
      color: #8E8E93;
    }
  }
  
  // Selected state for task highlighting
  &.selected {
    background-color: var(--accent-blue) !important;
    
    .task-title {
      color: #FFFFFF !important;
    }
    
    .task-assignee {
      color: rgba(255, 255, 255, 0.8) !important;
    }
    
    .task-timer {
      color: rgba(255, 255, 255, 0.8) !important;
    }
    
    .task-info-button {
      color: #FFFFFF !important;
      opacity: 0.9 !important;
      
      &:hover {
        opacity: 1 !important;
        background-color: rgba(255, 255, 255, 0.2) !important;
      }
    }
    
    // Ensure all icons/buttons are visible in selected state
    .note-indicator,
    .timer-icon {
      filter: brightness(1.2);
    }
    
    .disclosure-triangle {
      color: #FFFFFF !important;
      
      &:hover {
        background-color: rgba(255, 255, 255, 0.2) !important;
      }
    }
    
    .add-subtask-button {
      color: #FFFFFF !important;
      background-color: rgba(255, 255, 255, 0.15) !important;
      
      &:hover {
        background-color: rgba(255, 255, 255, 0.25) !important;
      }
    }
  }
  
  // New task placeholder
  &.new-task {
    border-bottom: none;
    margin-bottom: 8px;
  }
}



// New task wrapper
.new-task-wrapper {
  .task-item {
    cursor: pointer;
    transition: background-color 0.15s ease;
    
    &:hover {
      background-color: rgba(255, 255, 255, 0.05);
    }
  }
  
  .task-status-button {
    pointer-events: none;
    cursor: default;
    
    span {
      opacity: 0.5 !important;
      visibility: visible !important;
    }
  }
  
  .task-title {
    color: #FFFFFF !important;
    
    // Show placeholder text when empty
    &.new-task-placeholder:empty::before {
      content: attr(data-placeholder);
      color: #48484A !important;
      pointer-events: none;
    }
    
    &:focus {
      color: #FFFFFF !important; // Full opacity when active
    }
  }
}

// Task status container
.task-status-container {
  flex-shrink: 0;
  padding-top: 2px;
  position: relative;
  z-index: auto; // Don't create stacking context
  
  // When dropdown is open, ensure it's above everything
  &[data-dropdown-open="true"] {
    z-index: 1001 !important;
  }
}

// Task status button
.task-status-button {
  width: 20px;
  height: 20px;
  padding: 0;
  background: none;
  border: none;
  cursor: pointer;
  font-size: 14px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: opacity 0.15s;
  
  &:hover {
    opacity: 0.8;
  }
  
  &:disabled {
    cursor: default;
  }
  
  // When parent task is selected, ensure visibility
  .task-item.selected & {
    filter: brightness(1.2);
  }
}

// Task content
.task-content {
  flex: 1;
  min-width: 0;
  display: flex;
  align-items: center;
  gap: 8px;
}

.task-title {
  font-size: 17px;
  color: #FFFFFF;
  margin-bottom: 2px;
  word-wrap: break-word;
  font-weight: 400;
  line-height: 1.3;
  cursor: text;
  outline: none;
  display: inline-block;
  min-width: 75px;
  width: fit-content;
  max-width: 100%; // Prevent overflow
  pointer-events: auto; // Re-enable for text editing
  user-select: text;
  
  &:hover {
    // No underline, just ibeam cursor
  }
  
  &:focus {
    // No underline, just ibeam cursor
  }
}

// Task right section
.task-right {
  display: flex;
  align-items: center;
  gap: 8px;
  flex-shrink: 0;
  pointer-events: none; // Allow clicks to pass through the container
  
  // But enable pointer events on children
  > * {
    pointer-events: auto;
  }
}

// Task info button
.task-info-button {
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: none;
  border: none;
  color: var(--accent-blue);
  font-size: 16px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.15s ease;
  opacity: 0;
  pointer-events: none;
  
  // Show on task hover
  .task-item:hover & {
    opacity: 0.7;
    pointer-events: auto;
  }
  
  // Show when task is selected
  .task-item.selected & {
    opacity: 0.9;
    pointer-events: auto;
  }
  
  // Show when task title is being edited
  .task-item:has(.task-title:focus) & {
    opacity: 0.7;
    pointer-events: auto;
  }
  
  &:hover {
    opacity: 1 !important;
    background-color: var(--bg-tertiary);
  }
  
  &:active {
    transform: scale(0.95);
  }
}

// Time tracking display
.task-timer {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 13px;
  color: var(--text-tertiary);
  
  .timer-icon {
    font-size: 14px;
  }
  
  .timer-display {
    font-variant-numeric: tabular-nums;
    font-weight: 500;
  }
  
  &.active {
    color: var(--accent-blue);
  }
}

// Task icons
.task-icon {
  font-size: 18px;
  color: #8E8E93;
  cursor: pointer;
  
  &:hover {
    color: #AEAEB2;
  }
  
  &.info-icon {
    color: #0A84FF;
    font-size: 20px;
  }
}

// Task assignee icon
.task-assignee-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  
  .technician-initials {
    width: 24px;
    height: 24px;
    font-size: 11px;
  }
}

// Add subtask button
.add-subtask-button {
  opacity: 0;
  width: 24px;
  height: 24px;
  border-radius: 12px;
  background-color: var(--bg-tertiary);
  border: none;
  color: var(--text-secondary);
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.15s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  
  .task-item:hover & {
    opacity: 1;
  }
  
  &:hover {
    background-color: var(--accent-blue);
    color: white;
  }
}

// Subtasks container
.subtasks-container {
  padding-left: 32px; // Indent subtasks
  overflow: visible; // Ensure dropdowns can escape
  
  // Smooth transition for collapse/expand
  transition: max-height 0.4s cubic-bezier(0.4, 0, 0.2, 1), 
              opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  max-height: 5000px; // Large enough for most task lists
  opacity: 1;
  
  &.collapsed {
    max-height: 0;
    opacity: 0;
    overflow: hidden;
  }
  
  // Smooth transitions for FLIP animations on subtasks
  .task-item, .subtask-item {
    &[data-flip-animating="true"] {
      transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }
  }
}

// Disclosure container for subtasks
.disclosure-container {
  display: flex;
  align-items: center;
  gap: 4px;
}

// Subtask count badge
.subtask-count {
  font-size: 12px;
  font-weight: 500;
  color: var(--text-tertiary);
  min-width: 14px;
  text-align: right;
  transition: opacity 0.2s ease;
  
  // Selected state
  .task-item.selected & {
    color: rgba(255, 255, 255, 0.7);
  }
}

// Disclosure triangle for collapsing subtasks
.disclosure-triangle {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 20px;
  height: 20px;
  padding: 0;
  background: none;
  border: none;
  cursor: pointer;
  color: var(--text-tertiary);
  transition: color 0.2s ease;
  
  // No hover effect - just cursor change
  
  // Chevron styling
  svg {
    transition: opacity 0.2s ease;
  }
  
  .chevron-down,
  .chevron-right {
    color: inherit;
  }
  
  // Default state - show down chevron
  .chevron-down {
    display: block;
  }
  
  .chevron-right {
    display: none;
  }
  
  // When expanded (default)
  &[aria-expanded="true"] {
    .chevron-down {
      display: block !important;
    }
    .chevron-right {
      display: none !important;
    }
  }
  
  // When collapsed
  &[aria-expanded="false"] {
    .chevron-down {
      display: none !important;
    }
    .chevron-right {
      display: block !important;
    }
  }
}

// Task indicators
.note-indicator,
.assignee-indicator {
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.note-indicator {
  font-size: 16px;
}

.assignee-initials {
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background-color: var(--accent-blue);
  color: white;
  font-size: 11px;
  font-weight: 600;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

// Task status dropdown is now handled by the dropdown controller
// Only task-specific option styling remains here
.task-status-option {
  white-space: nowrap; // Prevent text wrapping
  min-width: 200px; // Ensure minimum width for content
  
  .status-emoji {
    font-size: 14px;
    width: 20px;
    text-align: center;
    flex-shrink: 0;
  }
}

// Task status dropdown specific styling
.task-status-container {
  // Don't set z-index here to avoid creating stacking context
  
  .dropdown-menu {
    min-width: 220px; // Wide enough for "Successfully Completed"
    width: max-content; // Grow to fit content
    max-width: 300px; // But not too wide
    z-index: 10000 !important; // Ensure dropdown appears above everything
    position: fixed !important; // Force fixed positioning
    background-color: var(--bg-secondary) !important;
    border: 1px solid var(--border-primary) !important;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5) !important;
    opacity: 1 !important;
    backdrop-filter: none !important;
  }
}

// New task placeholder uses contenteditable task-title
// No special input styles needed

// Empty state
.empty-tasks {
  text-align: center;
  padding: 60px 20px;
  color: var(--text-tertiary);
}

// Job popover (absolute positioned)
.job-popover {
  position: absolute;
  top: 100px;
  right: 40px;
  width: 320px;
  background-color: var(--bg-secondary);
  border: 1px solid var(--border-primary);
  border-radius: 12px;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
  z-index: 1000;
  animation: popoverIn 0.2s ease-out;
  overflow: visible;
  
  &.hidden {
    display: none;
  }
}

@keyframes popoverIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.popover-arrow {
  position: absolute;
  top: -8px;
  right: 120px;
  width: 16px;
  height: 8px;
  overflow: visible;
  background: transparent;
  border: none;
  
  svg {
    display: block;
    width: 100%;
    height: 100%;
  }
}

.popover-content {
  padding: 16px;
  max-height: 600px;
  overflow-y: visible;
  overflow-x: visible;
}

.popover-section {
  margin-bottom: 20px;
  
  &:last-child {
    margin-bottom: 0;
  }
  
  h3 {
    font-size: 13px;
    font-weight: 600;
    color: var(--text-tertiary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 12px;
  }
  
  h4 {
    font-size: 14px;
    font-weight: 500;
    color: var(--text-secondary);
    margin: 12px 0 8px;
  }
}

// Status and priority options
.status-option,
.priority-option {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 8px 12px;
  border-radius: 8px;
  background: transparent;
  border: none;
  color: var(--text-primary);
  cursor: pointer;
  transition: background-color 0.15s;
  text-align: left;
  font-size: 15px;
  width: 100%;
  
  &:hover {
    background-color: var(--bg-tertiary);
  }
  
  &.active {
    background-color: var(--accent-blue);
    color: #FFF;
  }
}

.status-emoji,
.priority-emoji {
  font-size: 16px;
  width: 24px;
  text-align: center;
}

// Assignee option
.assignee-option {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 8px 12px;
  border-radius: 8px;
  background: transparent;
  border: none;
  color: var(--text-primary);
  cursor: pointer;
  transition: background-color 0.15s;
  text-align: left;
  font-size: 15px;
  width: 100%;
  
  &:hover {
    background-color: var(--bg-tertiary);
  }
  
  &.active {
    background-color: var(--accent-blue);
    color: #FFF;
  }
  
  .checkmark {
    margin-left: auto;
    font-size: 14px;
  }
}

// Job description
.job-description {
  font-size: 14px;
  color: var(--text-secondary);
  line-height: 1.5;
  margin-bottom: 16px;
}

// Related people tags
.person-tag {
  display: inline-block;
  padding: 4px 10px;
  background-color: var(--bg-tertiary);
  border-radius: 16px;
  font-size: 13px;
  color: var(--text-primary);
  margin-right: 8px;
  margin-bottom: 8px;
}

// Popover actions section
.popover-actions {
  border-top: 1px solid var(--border-primary);
  padding-top: 16px;
  margin-top: 16px;
}

// Delete button
.btn-danger {
  background-color: #FF3B30;
  color: #FFF;
  border: none;
  padding: 8px 16px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.15s;
  
  &:hover {
    background-color: #FF453A;
  }
}

// Status bubble in toolbar
.status-bubble {
  height: 32px;
  padding: 0 12px;
  border-radius: 16px;
  background-color: #2C2C2E;
  border: none;
  display: flex;
  align-items: center;
  gap: 4px;
  cursor: pointer;
  transition: background-color 0.15s ease;
  
  &:hover {
    background-color: #3A3A3C;
  }
}

.bubble-icon {
  font-size: 14px;
  display: flex;
  align-items: center;
  justify-content: center;
}

// Technician initials badge
.technician-initials {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  background-color: #FF9500;
  color: #000;
  font-size: 9px;
  font-weight: 600;
}

// Animations
// Removed fadeIn animation that was causing tasks to animate on initial page load


// Drag and drop visual feedback
.task-item.drop-target,
.subtask-item.drop-target {
  background-color: var(--accent-blue) !important;
  transition: all 200ms cubic-bezier(0.18, 0.89, 0.32, 1.28);
  
  .task-title,
  .subtask-title {
    color: #FFFFFF !important;
  }
  
  .task-assignee,
  .assignee-indicator {
    color: rgba(255, 255, 255, 0.8) !important;
  }
  
  .task-timer {
    color: rgba(255, 255, 255, 0.8) !important;
  }
}

// Dragging state
.task-wrapper.dragging {
  opacity: 0.5;
  transform: scale(0.98);
  transition: all 200ms ease-out;
  z-index: 100; // Dragged item above others but below dropdowns
  
  .task-item,
  .subtask-item {
    cursor: grabbing !important;
  }
}

.task-item.dragging,
.subtask-item.dragging {
  opacity: 0.5;
  transform: scale(0.98);
  transition: all 200ms ease-out;
}

// Drop indicator line
.drop-indicator {
  height: 2px;
  background-color: var(--accent-blue);
  border-radius: 1px;
  box-shadow: 0 0 8px rgba(59, 130, 246, 0.5);
  transition: all 150ms ease-out;
  animation: dropIndicatorPulse 1s ease-in-out infinite;
}

@keyframes dropIndicatorPulse {
  0%, 100% {
    opacity: 0.8;
    transform: scaleX(1);
  }
  50% {
    opacity: 1;
    transform: scaleX(1.05);
  }
}

// Touch-specific styles for mobile
@media (hover: none) {
  .task-item,
  .subtask-item {
    cursor: grab;
    
    &:active {
      transform: scale(0.98);
      transition: transform 150ms ease-out;
    }
  }
  
  .task-wrapper {
    cursor: grab;
    
    &.dragging {
      opacity: 0.7;
    }
  }
}

// FLIP animation classes
.flip-animating {
  will-change: transform;
  pointer-events: none; // Prevent interaction during animation
}

.flip-container {
  position: relative;
  
  // Ensure smooth scrolling during animations
  &[data-flip-active="true"] {
    overflow-y: hidden;
  }
}

// Batch animation optimization
.tasks-list[data-flip-batch="true"] {
  .task-wrapper {
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    transition-delay: calc(var(--flip-index, 0) * 20ms);
  }
}

// Utility classes
.hidden {
  display: none !important;
}