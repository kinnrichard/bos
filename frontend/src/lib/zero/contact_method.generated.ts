// ü§ñ AUTO-GENERATED ZERO MUTATIONS
// Generated at: 2025-07-13T17:37:21Z
//
// ‚ö†Ô∏è  DO NOT EDIT THIS FILE DIRECTLY
// This file is automatically generated. Manual changes will be overwritten.
//
// üîß FOR CUSTOMIZATIONS:
// Use the corresponding .custom.ts file for your custom mutations
//
// üîÑ TO REGENERATE: Run `rails generate zero:mutations`


import { getZero } from './zero-client';

// Generated TypeScript types for contact_methods
// TypeScript interfaces for contact_methods

/**
 * Complete ContactMethod record as stored in database
 */
export interface ContactMethod {
  value?: string| null;
  formatted_value?: string| null;
  contact_type?: 0 | 1 | 2| null;
  created_at: number;
  updated_at: number;
  id: string;
  person_id?: string| null;
}

/**
 * Data required to create a new contact_method
 * Excludes auto-generated fields (id, created_at, updated_at)
 */
export interface CreateContactMethodData {
  value?: string| null;
  formatted_value?: string| null;
  contact_type?: 0 | 1 | 2| null;
  person_id?: string| null;
}

/**
 * Data for updating an existing contact_method
 * All fields optional, excludes auto-managed fields
 */
export interface UpdateContactMethodData {
  value?: string| null;
  formatted_value?: string| null;
  contact_type?: 0 | 1 | 2| null;
  person_id?: string| null;
}

/**
 * Standard response from mutation operations
 */
export interface ContactMethodMutationResult {
  id: string;
}


// Generated CRUD mutations for contact_methods

/**
 * Create a new contact_method
 * 
 * @param data - The contact_method data to create
 * @returns Promise resolving to the created contact_method ID
 * 
 * @example
 * ```typescript
 * import { createContactMethod } from './contact_method';
 * 
 * const result = await createContactMethod({
 *   // Add required fields here based on your schema
 * });
 * console.log('Created contact_method with ID:', result.id);
 * ```
 */
export async function createContactMethod(data: CreateContactMethodData): Promise<ContactMethodMutationResult> {
  const zero = getZero();
  if (!zero) {
    throw new Error('Zero client not initialized. Please ensure Zero is properly set up.');
  }
  
  // Generate unique ID with validation
  const id = crypto.randomUUID();
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('Failed to generate valid UUID');
  }

  const now = Date.now();

  try {
    await zero.mutate.contact_methods.insert({
      id,
      ...data,
      created_at: now,
      updated_at: now,
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to create contact_method: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Update an existing contact_method
 * 
 * @param id - The UUID of the contact_method to update
 * @param data - Partial contact_method data for updates
 * @returns Promise resolving to the updated contact_method ID
 * 
 * @example
 * ```typescript
 * import { updateContactMethod } from './contact_method';
 * 
 * const result = await updateContactMethod('123e4567-e89b-12d3-a456-426614174000', {
 *   // Add fields to update
 * });
 * console.log('Updated contact_method:', result.id);
 * ```
 */
export async function updateContactMethod(id: string, data: UpdateContactMethodData): Promise<ContactMethodMutationResult> {
  const zero = getZero();
  if (!zero) {
    throw new Error('Zero client not initialized. Please ensure Zero is properly set up.');
  }
  
  // Validate ID format
  if (!id || typeof id !== 'string') {
    throw new Error('ContactMethod ID is required and must be a string');
  }
  
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('ContactMethod ID must be a valid UUID');
  }

  // Validate that we have some data to update
  if (!data || Object.keys(data).length === 0) {
    throw new Error('Update data is required - at least one field must be provided');
  }

  const now = Date.now();

  try {
    await zero.mutate.contact_methods.update({
      id,
      ...data,
      updated_at: now,
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to update contact_method: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Delete a contact_method (permanent deletion)
 * 
 * @param id - The UUID of the contact_method to delete
 * @returns Promise resolving to the deleted contact_method ID
 * 
 * @example
 * ```typescript
 * import { deleteContactMethod } from './contact_method';
 * 
 * const result = await deleteContactMethod('123e4567-e89b-12d3-a456-426614174000');
 * console.log('Deleted contact_method:', result.id);
 * ```
 * 
 * @warning This is a permanent deletion and cannot be undone
 */
export async function deleteContactMethod(id: string): Promise<ContactMethodMutationResult> {
  const zero = getZero();
  if (!zero) {
    throw new Error('Zero client not initialized. Please ensure Zero is properly set up.');
  }
  
  // Validate ID format
  if (!id || typeof id !== 'string') {
    throw new Error('ContactMethod ID is required and must be a string');
  }
  
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('ContactMethod ID must be a valid UUID');
  }

  try {
    await zero.mutate.contact_methods.delete({
      id
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to delete contact_method: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Create or update a contact_method (upsert operation)
 * 
 * @param data - The contact_method data with optional ID for update, without ID for create
 * @returns Promise resolving to the contact_method ID (generated if creating, provided if updating)
 * 
 * @example
 * ```typescript
 * import { upsertContactMethod } from './contact_method';
 * 
 * // Create new contact_method (no ID provided)
 * const newResult = await upsertContactMethod({
 *   // Add required fields here
 * });
 * 
 * // Update existing contact_method (ID provided)
 * const updateResult = await upsertContactMethod({
 *   id: '123e4567-e89b-12d3-a456-426614174000',
 *   // Add fields to update
 * });
 * ```
 */
export async function upsertContactMethod(data: (CreateContactMethodData & { id?: string }) | (UpdateContactMethodData & { id: string })): Promise<ContactMethodMutationResult> {
  const zero = getZero();
  if (!zero) {
    throw new Error('Zero client not initialized. Please ensure Zero is properly set up.');
  }
  
  // Validate data is provided
  if (!data || Object.keys(data).length === 0) {
    throw new Error('Upsert data is required');
  }

  let id: string;
  const now = Date.now();

  // If ID is provided, validate it for update operation
  if (data.id) {
    if (!data.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
      throw new Error('ContactMethod ID must be a valid UUID');
    }
    id = data.id;
  } else {
    // Generate new ID for create operation
    id = crypto.randomUUID();
    if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
      throw new Error('Failed to generate valid UUID');
    }
  }

  try {
    const upsertData: any = {
      ...data,
      id,
      updated_at: now,
    };
    
    // Set created_at only if this is a new record
    if (!data.id) {
      upsertData.created_at = now;
    }
    
    await zero.mutate.contact_methods.upsert(upsertData);

    return { id };
  } catch (error) {
    throw new Error(`Failed to upsert contact_method: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}



// ActiveRecord-style instance class for individual contact_method records

/**
 * ActiveRecord-style instance class for ContactMethod
 * Provides Rails-compatible instance methods: update(), delete(), restore()
 * 
 * Generated from Rails model: ContactMethod
 * 
 * @example
 * ```typescript
 * const contact_method = ContactMethod.find('123').current;
 * if (contact_method) {
 *   const instance = new ContactMethodInstance(contact_method);
 *   await instance.update({ // fields to update });
 *   await instance.delete(); // Permanent delete
 *   
 * }
 * ```
 */

  constructor(data: ContactMethod) {
    super(data);
  }





  /**
   * Rails-compatible inspect method for debugging
   */
  inspect(): string {
    return `#<ContactMethodInstance id: ${this.data.id}>`;
  }
}

/**
 * Factory function to create ContactMethodInstance from data
 * Used internally by ReactiveRecord and ActiveRecord
 */
export function createContactMethodInstance(data: ContactMethod): ContactMethodInstance {
  return new ContactMethodInstance(data);
}


// Generated ActiveRecord-style queries for contact_methods


// Zero reactive query wrapper using materialize() for active queries
// This creates active queries that populate Zero's cache and stay synchronized
function createReactiveQuery<T>(queryBuilder: any, defaultValue: T) {
  let current = defaultValue;
  let resultType: 'loading' | 'success' | 'error' = 'loading';
  let error: Error | null = null;
  let view: any = null;
  let retryCount = 0;
  const maxRetries = 3;

  const execute = async () => {
    try {
      resultType = 'loading';
      
      // Check if Zero is ready
      const zero = getZero();
      if (!zero) {
        setTimeout(() => execute(), 100);
        return;
      }
      
      // Create active query using materialize()
      view = queryBuilder.materialize();
      const result = await view.data;
      
      // If result is null and we haven't retried much, try again
      if ((result === null || result === undefined) && retryCount < maxRetries) {
        retryCount++;
        setTimeout(() => execute(), 500);
        return;
      }
      
      current = result || defaultValue;
      resultType = 'success';
      error = null;
      retryCount = 0;
    } catch (err) {
      error = err instanceof Error ? err : new Error('Unknown error');
      resultType = 'error';
      
      // Retry on error if we haven't exceeded max retries
      if (retryCount < maxRetries) {
        retryCount++;
        setTimeout(() => execute(), 1000);
      }
    }
  };

  // Execute after a small delay to let Zero initialize
  setTimeout(() => execute(), 100);

  return {
    get current() { return current; },
    get value() { return current; },
    get resultType() { return resultType; },
    get error() { return error; },
    refresh: execute,
    destroy: () => view?.destroy()
  };
}

/**
 * ActiveRecord-style query interface for contact_methods
 * Provides offline-capable queries that work with Zero's local database
 */
export const ContactMethod = {
  /**
   * Find a single contact_method by ID
   * @param id - The UUID of the contact_method
   * @returns Zero query result with the contact_method or null
   * 
   * @example
   * ```typescript
   * const contact_method = ContactMethod.find('123e4567-e89b-12d3-a456-426614174000');
   * console.log(contact_method.current); // The contact_method object or null
   * ```
   */
  find(id: string) {
    const zero = getZero();
    if (!zero) return { current: null, value: null, resultType: 'loading' as const, error: null };
    
    return createReactiveQuery(
      zero.query.contact_methods.where('id', id).one(),
      null as ContactMethod | null
    );
  },

  /**
   * Get all contact_methods (includes discarded records like Rails Task.all)
   * @returns Zero query result with array of contact_methods
   * 
   * @example
   * ```typescript
   * const allContactMethods = ContactMethod.all();
   * console.log(allContactMethods.current); // Array of contact_methods including discarded
   * ```
   */
  all() {
    const zero = getZero();
    if (!zero) return { current: [], value: [], resultType: 'loading' as const, error: null };
    
    return createReactiveQuery(
      zero.query.contact_methods.orderBy('created_at', 'desc'),
      [] as ContactMethod[]
    );
  },

  /**
   * Find contact_methods matching conditions (includes discarded)
   * @param conditions - Object with field/value pairs to match
   * @returns Zero query result with array of matching contact_methods
   * 
   * @example
   * ```typescript
   * const activeContactMethods = ContactMethod.where({ status: 'active' });
   * const clientJobs = ContactMethod.where({ client_id: 'some-uuid' });
   * ```
   */
  where(conditions: Partial<ContactMethod>) {
    const zero = getZero();
    if (!zero) return { current: [], value: [], resultType: 'loading' as const, error: null };
    
    let query = zero.query.contact_methods;
    
    Object.entries(conditions).forEach(([key, value]) => {
      if (value !== undefined && value !== null) {
        query = query.where(key as any, value);
      }
    });
    
    return createReactiveQuery(
      query.orderBy('created_at', 'desc'),
      [] as ContactMethod[]
    );
  }
};

