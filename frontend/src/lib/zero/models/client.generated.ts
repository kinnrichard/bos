// ü§ñ AUTO-GENERATED ZERO MUTATIONS
// Generated at: 2025-07-11T08:03:40Z
//
// ‚ö†Ô∏è  DO NOT EDIT THIS FILE DIRECTLY
// This file is automatically generated. Manual changes will be overwritten.
//
// üîß FOR CUSTOMIZATIONS:
// Use the corresponding .custom.ts file for your custom mutations
//
// üîÑ TO REGENERATE: Run `rails generate zero:mutations`


import { getZero } from '../zero-client';

// Generated TypeScript types for clients
// TypeScript interfaces for clients

/**
 * Complete Client record as stored in database
 */
export interface Client {
  name?: string| null;
  client_type?: string| null;
  created_at: number;
  updated_at: number;
  name_normalized?: string| null;
  id: string;
}

/**
 * Data required to create a new client
 * Excludes auto-generated fields (id, created_at, updated_at)
 */
export interface CreateClientData {
  name?: string| null;
  client_type?: string| null;
  name_normalized?: string| null;
}

/**
 * Data for updating an existing client
 * All fields optional, excludes auto-managed fields
 */
export interface UpdateClientData {
  name?: string| null;
  client_type?: string| null;
  name_normalized?: string| null;
}

/**
 * Standard response from mutation operations
 */
export interface ClientMutationResult {
  id: string;
}


// Generated CRUD mutations for clients

/**
 * Create a new client
 * 
 * @param data - The client data to create
 * @returns Promise resolving to the created client ID
 * 
 * @example
 * ```typescript
 * import { createClient } from '../zero-client';
 * 
 * const result = await createClient({
 *   // Add required fields here based on your schema
 * });
 * console.log('Created client with ID:', result.id);
 * ```
 */
export async function createClient(data: CreateClientData): Promise<ClientMutationResult> {
  const zero = getZero();
  
  // Generate unique ID with validation
  const id = crypto.randomUUID();
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('Failed to generate valid UUID');
  }

  const now = Date.now();

  try {
    await zero.mutate.clients.insert({
      id,
      ...data,
      created_at: now,
      updated_at: now,
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to create client: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Update an existing client
 * 
 * @param id - The UUID of the client to update
 * @param data - Partial client data for updates
 * @returns Promise resolving to the updated client ID
 * 
 * @example
 * ```typescript
 * import { updateClient } from '../zero-client';
 * 
 * const result = await updateClient('123e4567-e89b-12d3-a456-426614174000', {
 *   // Add fields to update
 * });
 * console.log('Updated client:', result.id);
 * ```
 */
export async function updateClient(id: string, data: UpdateClientData): Promise<ClientMutationResult> {
  const zero = getZero();
  
  // Validate ID format
  if (!id || typeof id !== 'string') {
    throw new Error('Client ID is required and must be a string');
  }
  
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('Client ID must be a valid UUID');
  }

  // Validate that we have some data to update
  if (!data || Object.keys(data).length === 0) {
    throw new Error('Update data is required - at least one field must be provided');
  }

  const now = Date.now();

  try {
    await zero.mutate.clients.update({
      id,
      ...data,
      updated_at: now,
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to update client: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Delete a client (permanent deletion)
 * 
 * @param id - The UUID of the client to delete
 * @returns Promise resolving to the deleted client ID
 * 
 * @example
 * ```typescript
 * import { deleteClient } from '../zero-client';
 * 
 * const result = await deleteClient('123e4567-e89b-12d3-a456-426614174000');
 * console.log('Deleted client:', result.id);
 * ```
 * 
 * @warning This is a permanent deletion and cannot be undone
 */
export async function deleteClient(id: string): Promise<ClientMutationResult> {
  const zero = getZero();
  
  // Validate ID format
  if (!id || typeof id !== 'string') {
    throw new Error('Client ID is required and must be a string');
  }
  
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('Client ID must be a valid UUID');
  }

  try {
    await zero.mutate.clients.delete({
      id
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to delete client: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Create or update a client (upsert operation)
 * 
 * @param data - The client data with optional ID for update, without ID for create
 * @returns Promise resolving to the client ID (generated if creating, provided if updating)
 * 
 * @example
 * ```typescript
 * import { upsertClient } from '../zero-client';
 * 
 * // Create new client (no ID provided)
 * const newResult = await upsertClient({
 *   // Add required fields here
 * });
 * 
 * // Update existing client (ID provided)
 * const updateResult = await upsertClient({
 *   id: '123e4567-e89b-12d3-a456-426614174000',
 *   // Add fields to update
 * });
 * ```
 */
export async function upsertClient(data: (CreateClientData & { id?: string }) | (UpdateClientData & { id: string })): Promise<ClientMutationResult> {
  const zero = getZero();
  
  // Validate data is provided
  if (!data || Object.keys(data).length === 0) {
    throw new Error('Upsert data is required');
  }

  let id: string;
  const now = Date.now();

  // If ID is provided, validate it for update operation
  if (data.id) {
    if (!data.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
      throw new Error('Client ID must be a valid UUID');
    }
    id = data.id;
  } else {
    // Generate new ID for create operation
    id = crypto.randomUUID();
    if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
      throw new Error('Failed to generate valid UUID');
    }
  }

  try {
    await zero.mutate.clients.upsert({
      ...data,
      id,
      updated_at: now,
      // Set created_at only if this is a new record
      ...(data.id ? {} : { created_at: now }),
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to upsert client: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


// Generated ActiveRecord-style queries for clients

// Zero reactive query wrapper using materialize() for active queries
// This creates active queries that populate Zero's cache and stay synchronized
function createReactiveQuery<T>(queryBuilder: any, defaultValue: T) {
  let current = defaultValue;
  let resultType: 'loading' | 'success' | 'error' = 'loading';
  let error: Error | null = null;
  let view: any = null;
  let retryCount = 0;
  const maxRetries = 3;

  const execute = async () => {
    try {
      resultType = 'loading';
      
      // Check if Zero is ready
      const zero = getZero();
      if (!zero) {
        setTimeout(() => execute(), 100);
        return;
      }
      
      // Create active query using materialize()
      view = queryBuilder.materialize();
      const result = await view.data;
      
      // If result is null and we haven't retried much, try again
      if ((result === null || result === undefined) && retryCount < maxRetries) {
        retryCount++;
        setTimeout(() => execute(), 500);
        return;
      }
      
      current = result || defaultValue;
      resultType = 'success';
      error = null;
      retryCount = 0;
    } catch (err) {
      error = err instanceof Error ? err : new Error('Unknown error');
      resultType = 'error';
      
      // Retry on error if we haven't exceeded max retries
      if (retryCount < maxRetries) {
        retryCount++;
        setTimeout(() => execute(), 1000);
      }
    }
  };

  // Execute after a small delay to let Zero initialize
  setTimeout(() => execute(), 100);

  return {
    get current() { return current; },
    get value() { return current; },
    get resultType() { return resultType; },
    get error() { return error; },
    refresh: execute,
    destroy: () => view?.destroy()
  };
}

/**
 * ActiveRecord-style query interface for clients
 * Provides offline-capable queries that work with Zero's local database
 */
export const Client = {
  /**
   * Find a single client by ID
   * @param id - The UUID of the client
   * @returns Zero query result with the client or null
   * 
   * @example
   * ```typescript
   * const client = Client.find('123e4567-e89b-12d3-a456-426614174000');
   * console.log(client.current); // The client object or null
   * ```
   */
  find(id: string) {
    const zero = getZero();
    if (!zero) return { current: null, value: null, resultType: 'loading' as const, error: null };
    
    return createReactiveQuery(
      zero.query.clients.where('id', id).one(),
      null as Client | null
    );
  },

  /**
   * Get all clients
   * @returns Zero query result with array of clients
   * 
   * @example
   * ```typescript
   * const allClients = Client.all();
   * console.log(allClients.current); // Array of clients
   * ```
   */
  all() {
    const zero = getZero();
    if (!zero) return { current: [], value: [], resultType: 'loading' as const, error: null };
    
    return createReactiveQuery(
      zero.query.clients.orderBy('created_at', 'desc'),
      [] as Client[]
    );
  },

  /**
   * Find clients matching conditions
   * @param conditions - Object with field/value pairs to match
   * @returns Zero query result with array of matching clients
   * 
   * @example
   * ```typescript
   * const activeClients = Client.where({ status: 'active' });
   * const clientJobs = Client.where({ client_id: 'some-uuid' });
   * ```
   */
  where(conditions: Partial<Client>) {
    const zero = getZero();
    if (!zero) return { current: [], value: [], resultType: 'loading' as const, error: null };
    
    let query = zero.query.clients;
    
    Object.entries(conditions).forEach(([key, value]) => {
      if (value !== undefined && value !== null) {
        query = query.where(key, value);
      }
    });
    
    return createReactiveQuery(
      query.orderBy('created_at', 'desc'),
      [] as Client[]
    );
  }
};

