// ü§ñ AUTO-GENERATED ZERO MUTATIONS
// Generated at: 2025-07-11T08:03:40Z
//
// ‚ö†Ô∏è  DO NOT EDIT THIS FILE DIRECTLY
// This file is automatically generated. Manual changes will be overwritten.
//
// üîß FOR CUSTOMIZATIONS:
// Use the corresponding .custom.ts file for your custom mutations
//
// üîÑ TO REGENERATE: Run `rails generate zero:mutations`


import { getZero } from '../zero-client';
import { ReactiveQuery, ReactiveQueryOne } from '../reactive-query.svelte';
import { useQuery } from 'zero-svelte-query';

// Generated TypeScript types for activity_logs
// TypeScript interfaces for activity_logs

/**
 * Complete ActivityLog record as stored in database
 */
export interface ActivityLog {
  action?: string| null;
  loggable_type: string;
  metadata?: any| null;
  created_at: number;
  updated_at: number;
  id: string;
  user_id?: string| null;
  client_id?: string| null;
  job_id?: string| null;
  loggable_id?: string| null;
}

/**
 * Data required to create a new activity_log
 * Excludes auto-generated fields (id, created_at, updated_at)
 */
export interface CreateActivityLogData {
  action?: string| null;
  loggable_type: string;
  metadata?: any| null;
  user_id?: string| null;
  client_id?: string| null;
  job_id?: string| null;
  loggable_id?: string| null;
}

/**
 * Data for updating an existing activity_log
 * All fields optional, excludes auto-managed fields
 */
export interface UpdateActivityLogData {
  action?: string| null;
  loggable_type?: string;
  metadata?: any| null;
  user_id?: string| null;
  client_id?: string| null;
  job_id?: string| null;
  loggable_id?: string| null;
}

/**
 * Standard response from mutation operations
 */
export interface ActivityLogMutationResult {
  id: string;
}


// Generated CRUD mutations for activity_logs

/**
 * Create a new activity_log
 * 
 * @param data - The activity_log data to create
 * @returns Promise resolving to the created activity_log ID
 * 
 * @example
 * ```typescript
 * import { createActivityLog } from './activity_log';
 * 
 * const result = await createActivityLog({
 *   // Add required fields here based on your schema
 * });
 * console.log('Created activity_log with ID:', result.id);
 * ```
 */
export async function createActivityLog(data: CreateActivityLogData): Promise<ActivityLogMutationResult> {
  const zero = getZero();
  
  // Validate required fields
  if (!data.loggable_type?.trim()) throw new Error('Loggable type is required');
  // Generate unique ID with validation
  const id = crypto.randomUUID();
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('Failed to generate valid UUID');
  }

  const now = Date.now();

  try {
    await zero.mutate.activity_logs.insert({
      id,
      ...data,
      created_at: now,
      updated_at: now,
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to create activity_log: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Update an existing activity_log
 * 
 * @param id - The UUID of the activity_log to update
 * @param data - Partial activity_log data for updates
 * @returns Promise resolving to the updated activity_log ID
 * 
 * @example
 * ```typescript
 * import { updateActivityLog } from './activity_log';
 * 
 * const result = await updateActivityLog('123e4567-e89b-12d3-a456-426614174000', {
 *   // Add fields to update
 * });
 * console.log('Updated activity_log:', result.id);
 * ```
 */
export async function updateActivityLog(id: string, data: UpdateActivityLogData): Promise<ActivityLogMutationResult> {
  const zero = getZero();
  
  // Validate ID format
  if (!id || typeof id !== 'string') {
    throw new Error('ActivityLog ID is required and must be a string');
  }
  
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('ActivityLog ID must be a valid UUID');
  }

  // Validate that we have some data to update
  if (!data || Object.keys(data).length === 0) {
    throw new Error('Update data is required - at least one field must be provided');
  }

  const now = Date.now();

  try {
    await zero.mutate.activity_logs.update({
      id,
      ...data,
      updated_at: now,
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to update activity_log: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Delete a activity_log (permanent deletion)
 * 
 * @param id - The UUID of the activity_log to delete
 * @returns Promise resolving to the deleted activity_log ID
 * 
 * @example
 * ```typescript
 * import { deleteActivityLog } from './activity_log';
 * 
 * const result = await deleteActivityLog('123e4567-e89b-12d3-a456-426614174000');
 * console.log('Deleted activity_log:', result.id);
 * ```
 * 
 * @warning This is a permanent deletion and cannot be undone
 */
export async function deleteActivityLog(id: string): Promise<ActivityLogMutationResult> {
  const zero = getZero();
  
  // Validate ID format
  if (!id || typeof id !== 'string') {
    throw new Error('ActivityLog ID is required and must be a string');
  }
  
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('ActivityLog ID must be a valid UUID');
  }

  try {
    await zero.mutate.activity_logs.delete({
      id
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to delete activity_log: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Create or update a activity_log (upsert operation)
 * 
 * @param data - The activity_log data with optional ID for update, without ID for create
 * @returns Promise resolving to the activity_log ID (generated if creating, provided if updating)
 * 
 * @example
 * ```typescript
 * import { upsertActivityLog } from './activity_log';
 * 
 * // Create new activity_log (no ID provided)
 * const newResult = await upsertActivityLog({
 *   // Add required fields here
 * });
 * 
 * // Update existing activity_log (ID provided)
 * const updateResult = await upsertActivityLog({
 *   id: '123e4567-e89b-12d3-a456-426614174000',
 *   // Add fields to update
 * });
 * ```
 */
export async function upsertActivityLog(data: (CreateActivityLogData & { id?: string }) | (UpdateActivityLogData & { id: string })): Promise<ActivityLogMutationResult> {
  const zero = getZero();
  
  // Validate data is provided
  if (!data || Object.keys(data).length === 0) {
    throw new Error('Upsert data is required');
  }

  let id: string;
  const now = Date.now();

  // If ID is provided, validate it for update operation
  if (data.id) {
    if (!data.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
      throw new Error('ActivityLog ID must be a valid UUID');
    }
    id = data.id;
  } else {
    // Generate new ID for create operation
    id = crypto.randomUUID();
    if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
      throw new Error('Failed to generate valid UUID');
    }
  }

  try {
    await zero.mutate.activity_logs.upsert({
      ...data,
      id,
      updated_at: now,
      // Set created_at only if this is a new record
      ...(data.id ? {} : { created_at: now }),
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to upsert activity_log: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


// Generated ActiveRecord-style queries for activity_logs

/**
 * ActiveRecord-style query interface for activity_logs
 * Provides offline-capable queries that work with Zero's local database
 */
export const ActivityLog = {
  /**
   * Find a single activity_log by ID
   * @param id - The UUID of the activity_log
   * @returns Zero query result with the activity_log or null
   * 
   * @example
   * ```typescript
   * const activity_log = ActivityLog.find('123e4567-e89b-12d3-a456-426614174000');
   * console.log(activity_log.current); // The activity_log object or null
   * ```
   */
  find(id: string) {
    const zero = getZero();
    if (!zero) return { current: null, value: null, resultType: 'loading' as const };
    return useQuery(zero.query.activity_logs.where('id', id).one());
  },

  /**
   * Get all activity_logs
   * @returns Zero query result with array of activity_logs
   * 
   * @example
   * ```typescript
   * const allActivityLogs = ActivityLog.all();
   * console.log(allActivityLogs.current); // Array of activity_logs
   * ```
   */
  all() {
    const zero = getZero();
    if (!zero) return { current: [], value: [], resultType: 'loading' as const };
    return useQuery(zero.query.activity_logs.orderBy('created_at', 'desc'));
  },

  /**
   * Find activity_logs matching conditions
   * @param conditions - Object with field/value pairs to match
   * @returns Zero query result with array of matching activity_logs
   * 
   * @example
   * ```typescript
   * const activeActivityLogs = ActivityLog.where({ status: 'active' });
   * const clientJobs = ActivityLog.where({ client_id: 'some-uuid' });
   * ```
   */
  where(conditions: Partial<ActivityLog>) {
    const zero = getZero();
    if (!zero) return { current: [], value: [], resultType: 'loading' as const };
    
    let query = zero.query.activity_logs;
    
    Object.entries(conditions).forEach(([key, value]) => {
      if (value !== undefined && value !== null) {
        query = query.where(key, value);
      }
    });
    
    return useQuery(query.orderBy('created_at', 'desc'));
  }
};

