// ü§ñ AUTO-GENERATED ZERO MUTATIONS
// Generated at: 2025-07-11T08:03:40Z
//
// ‚ö†Ô∏è  DO NOT EDIT THIS FILE DIRECTLY
// This file is automatically generated. Manual changes will be overwritten.
//
// üîß FOR CUSTOMIZATIONS:
// Use the corresponding .custom.ts file for your custom mutations
//
// üîÑ TO REGENERATE: Run `rails generate zero:mutations`


import { getZero } from '../zero-client';
import { ReactiveQuery, ReactiveQueryOne } from '../reactive-query';

// Generated TypeScript types for users
// TypeScript interfaces for users

/**
 * Complete User record as stored in database
 */
export interface User {
  name?: string| null;
  email?: string| null;
  role?: number| null;
  created_at: number;
  updated_at: number;
  password_digest?: string| null;
  resort_tasks_on_status_change: boolean;
  id: string;
}

/**
 * Data required to create a new user
 * Excludes auto-generated fields (id, created_at, updated_at)
 */
export interface CreateUserData {
  name?: string| null;
  email?: string| null;
  role?: number| null;
  password_digest?: string| null;
  resort_tasks_on_status_change: boolean;
}

/**
 * Data for updating an existing user
 * All fields optional, excludes auto-managed fields
 */
export interface UpdateUserData {
  name?: string| null;
  email?: string| null;
  role?: number| null;
  password_digest?: string| null;
  resort_tasks_on_status_change?: boolean;
}

/**
 * Standard response from mutation operations
 */
export interface UserMutationResult {
  id: string;
}


// Generated CRUD mutations for users

/**
 * Create a new user
 * 
 * @param data - The user data to create
 * @returns Promise resolving to the created user ID
 * 
 * @example
 * ```typescript
 * import { createUser } from './user';
 * 
 * const result = await createUser({
 *   // Add required fields here based on your schema
 * });
 * console.log('Created user with ID:', result.id);
 * ```
 */
export async function createUser(data: CreateUserData): Promise<UserMutationResult> {
  const zero = getZero();
  
  // Validate required fields
  if (data.resort_tasks_on_status_change === undefined || data.resort_tasks_on_status_change === null) throw new Error('Resort tasks on status change is required');
  // Generate unique ID with validation
  const id = crypto.randomUUID();
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('Failed to generate valid UUID');
  }

  const now = Date.now();

  try {
    await zero.mutate.users.insert({
      id,
      ...data,
      created_at: now,
      updated_at: now,
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to create user: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Update an existing user
 * 
 * @param id - The UUID of the user to update
 * @param data - Partial user data for updates
 * @returns Promise resolving to the updated user ID
 * 
 * @example
 * ```typescript
 * import { updateUser } from './user';
 * 
 * const result = await updateUser('123e4567-e89b-12d3-a456-426614174000', {
 *   // Add fields to update
 * });
 * console.log('Updated user:', result.id);
 * ```
 */
export async function updateUser(id: string, data: UpdateUserData): Promise<UserMutationResult> {
  const zero = getZero();
  
  // Validate ID format
  if (!id || typeof id !== 'string') {
    throw new Error('User ID is required and must be a string');
  }
  
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('User ID must be a valid UUID');
  }

  // Validate that we have some data to update
  if (!data || Object.keys(data).length === 0) {
    throw new Error('Update data is required - at least one field must be provided');
  }

  const now = Date.now();

  try {
    await zero.mutate.users.update({
      id,
      ...data,
      updated_at: now,
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to update user: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Delete a user (permanent deletion)
 * 
 * @param id - The UUID of the user to delete
 * @returns Promise resolving to the deleted user ID
 * 
 * @example
 * ```typescript
 * import { deleteUser } from './user';
 * 
 * const result = await deleteUser('123e4567-e89b-12d3-a456-426614174000');
 * console.log('Deleted user:', result.id);
 * ```
 * 
 * @warning This is a permanent deletion and cannot be undone
 */
export async function deleteUser(id: string): Promise<UserMutationResult> {
  const zero = getZero();
  
  // Validate ID format
  if (!id || typeof id !== 'string') {
    throw new Error('User ID is required and must be a string');
  }
  
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('User ID must be a valid UUID');
  }

  try {
    await zero.mutate.users.delete({
      id
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to delete user: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Create or update a user (upsert operation)
 * 
 * @param data - The user data with optional ID for update, without ID for create
 * @returns Promise resolving to the user ID (generated if creating, provided if updating)
 * 
 * @example
 * ```typescript
 * import { upsertUser } from './user';
 * 
 * // Create new user (no ID provided)
 * const newResult = await upsertUser({
 *   // Add required fields here
 * });
 * 
 * // Update existing user (ID provided)
 * const updateResult = await upsertUser({
 *   id: '123e4567-e89b-12d3-a456-426614174000',
 *   // Add fields to update
 * });
 * ```
 */
export async function upsertUser(data: (CreateUserData & { id?: string }) | (UpdateUserData & { id: string })): Promise<UserMutationResult> {
  const zero = getZero();
  
  // Validate data is provided
  if (!data || Object.keys(data).length === 0) {
    throw new Error('Upsert data is required');
  }

  let id: string;
  const now = Date.now();

  // If ID is provided, validate it for update operation
  if (data.id) {
    if (!data.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
      throw new Error('User ID must be a valid UUID');
    }
    id = data.id;
  } else {
    // Generate new ID for create operation
    id = crypto.randomUUID();
    if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
      throw new Error('Failed to generate valid UUID');
    }
  }

  try {
    await zero.mutate.users.upsert({
      ...data,
      id,
      updated_at: now,
      // Set created_at only if this is a new record
      ...(data.id ? {} : { created_at: now }),
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to upsert user: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


// Generated ActiveRecord-style queries for users

// Uses new ReactiveQuery classes with Zero's native addListener for real-time updates


/**
 * ActiveRecord-style query interface for users
 * Provides offline-capable queries that work with Zero's local database
 */
export const User = {
  /**
   * Find a single user by ID
   * @param id - The UUID of the user
   * @returns Zero query result with the user or null
   * 
   * @example
   * ```typescript
   * const user = User.find('123e4567-e89b-12d3-a456-426614174000');
   * console.log(user.current); // The user object or null
   * ```
   */
  find(id: string) {
    return new ReactiveQueryOne<User>(
      () => {
        const zero = getZero();
        return zero ? zero.query.users.where('id', id).one() : null;
      },
      null
    );
  },

  /**
   * Get all users
   * @returns Zero query result with array of users
   * 
   * @example
   * ```typescript
   * const allUsers = User.all();
   * console.log(allUsers.current); // Array of users
   * ```
   */
  all() {
    return new ReactiveQuery<User>(
      () => {
        const zero = getZero();
        return zero ? zero.query.users.orderBy('created_at', 'desc') : null;
      },
      []
    );
  },

  /**
   * Find users matching conditions
   * @param conditions - Object with field/value pairs to match
   * @returns Zero query result with array of matching users
   * 
   * @example
   * ```typescript
   * const activeUsers = User.where({ status: 'active' });
   * const clientJobs = User.where({ client_id: 'some-uuid' });
   * ```
   */
  where(conditions: Partial<User>) {
    return new ReactiveQuery<User>(
      () => {
        const zero = getZero();
        if (!zero) return null;
        
        let query = zero.query.users;
        
        Object.entries(conditions).forEach(([key, value]) => {
          if (value !== undefined && value !== null) {
            query = query.where(key, value);
          }
        });
        
        return query.orderBy('created_at', 'desc');
      },
      []
    );
  }
};

