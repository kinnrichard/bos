// 🤖 AUTO-GENERATED ZERO SCHEMA
// Generated at: 2025-07-10T20:17:50Z
// 
// ⚠️  DO NOT EDIT THIS FILE DIRECTLY
// This file is automatically generated from your Rails schema.
// Any manual changes will be overwritten on the next generation.
//
// 🔧 FOR CUSTOMIZATIONS:
// 1. Create a separate file like 'custom-schema-extensions.ts'
// 2. Import and extend this schema in your application code
// 3. Use Zero's schema composition features for custom relationships
//
// 🔄 TO REGENERATE: Run `rails zero:generate_schema`
// 📚 DOCS: https://zero.rocicorp.dev/docs/schema

import {
  createSchema,
  table,
  string,
  number,
  boolean,
  json,
  relationships,
  type Zero
} from '@rocicorp/zero';

// Activity logs table
const activity_log = table('activity_logs')
  .columns({
    action: string().optional(),
    loggable_type: string(),
    metadata: json().optional(),
    created_at: string(),
    updated_at: string(),
    id: string(),
    user_id: string().optional(),
    client_id: string().optional(),
    job_id: string().optional(),
    loggable_id: string().optional()
  })
  .primaryKey('id');


// Contact methods table
const contact_method = table('contact_methods')
  .columns({
    value: string().optional(),
    formatted_value: string().optional(),
    contact_type: string().optional(),
    created_at: string(),
    updated_at: string(),
    id: string(),
    person_id: string().optional()
  })
  .primaryKey('id');


// Jobs table
const job = table('jobs')
  .columns({
    title: string().optional(),
    status: string().optional(),
    priority: number().optional(),
    due_date: string().optional(),
    start_on_date: string().optional(),
    created_at: string(),
    updated_at: string(),
    description: string().optional(),
    due_on: string().optional(),
    due_time: string().optional(),
    start_on: string().optional(),
    start_time: string().optional(),
    lock_version: number(),
    id: string(),
    client_id: string().optional(),
    created_by_id: string().optional()
  })
  .primaryKey('id');


// Clients table
const client = table('clients')
  .columns({
    name: string().optional(),
    client_type: string().optional(),
    created_at: string(),
    updated_at: string(),
    name_normalized: string().optional(),
    id: string()
  })
  .primaryKey('id');


// Devices table
const device = table('devices')
  .columns({
    name: string().optional(),
    model: string().optional(),
    serial_number: string().optional(),
    location: string().optional(),
    notes: string().optional(),
    created_at: string(),
    updated_at: string(),
    id: string(),
    client_id: string().optional(),
    person_id: string().optional()
  })
  .primaryKey('id');


// Job assignments table
const job_assignment = table('job_assignments')
  .columns({
    created_at: string(),
    updated_at: string(),
    id: string(),
    job_id: string().optional(),
    user_id: string().optional()
  })
  .primaryKey('id');


// Job people table
const job_person = table('job_people')
  .columns({
    created_at: string(),
    updated_at: string(),
    id: string(),
    job_id: string().optional(),
    person_id: string().optional()
  })
  .primaryKey('id');


// Job targets table
const job_target = table('job_targets')
  .columns({
    target_type: string(),
    status: string().optional(),
    instance_number: number(),
    reason: string().optional(),
    created_at: string(),
    updated_at: string(),
    id: string(),
    job_id: string().optional(),
    target_id: string().optional()
  })
  .primaryKey('id');


// Notes table
const note = table('notes')
  .columns({
    notable_type: string(),
    content: string().optional(),
    created_at: string(),
    updated_at: string(),
    metadata: json().optional(),
    id: string(),
    user_id: string().optional(),
    notable_id: string().optional()
  })
  .primaryKey('id');


// People table
const person = table('people')
  .columns({
    name: string().optional(),
    notes: string().optional(),
    created_at: string(),
    updated_at: string(),
    id: string(),
    client_id: string().optional()
  })
  .primaryKey('id');


// Scheduled date time users table
const scheduled_date_time_user = table('scheduled_date_time_users')
  .columns({
    created_at: string(),
    updated_at: string(),
    id: string(),
    scheduled_date_time_id: string().optional(),
    user_id: string().optional()
  })
  .primaryKey('id');


// Scheduled date times table
const scheduled_date_time = table('scheduled_date_times')
  .columns({
    schedulable_type: string(),
    scheduled_type: string(),
    scheduled_date: string(),
    scheduled_time: string().optional(),
    notes: string().optional(),
    created_at: string(),
    updated_at: string(),
    id: string(),
    schedulable_id: string().optional()
  })
  .primaryKey('id');


// Tasks table
const task = table('tasks')
  .columns({
    title: string().optional(),
    status: string().optional(),
    position: number().optional(),
    created_at: string(),
    updated_at: string(),
    subtasks_count: number().optional(),
    reordered_at: string().optional(),
    lock_version: number(),
    applies_to_all_targets: boolean(),
    id: string(),
    job_id: string().optional(),
    assigned_to_id: string().optional(),
    parent_id: string().optional(),
    deleted_at: string().optional()
  })
  .primaryKey('id');


// Task completions table
const task_completion = table('task_completions')
  .columns({
    status: string(),
    completed_at: string().optional(),
    notes: string().optional(),
    created_at: string(),
    updated_at: string(),
    id: string(),
    task_id: string().optional(),
    job_target_id: string().optional(),
    completed_by_id: string().optional()
  })
  .primaryKey('id');


// Users table
const user = table('users')
  .columns({
    name: string().optional(),
    email: string().optional(),
    role: string().optional(),
    created_at: string(),
    updated_at: string(),
    password_digest: string().optional(),
    resort_tasks_on_status_change: boolean(),
    id: string()
  })
  .primaryKey('id');


// Users relationships
const userRelationships = relationships(user, ({ one, many }) => ({
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_log,
  destField: ['user_id'],
}),
  assignedJobs: many({
  sourceField: ['id'],
  destSchema: job,
  destField: ['assigned_to_id'],
}),
  assignedTasks: many({
  sourceField: ['id'],
  destSchema: task,
  destField: ['assigned_to_id'],
}),
  jobAssignments: many({
  sourceField: ['id'],
  destSchema: job_assignment,
  destField: ['user_id'],
}),
  scheduledDateTimeUsers: many({
  sourceField: ['id'],
  destSchema: scheduled_date_time_user,
  destField: ['user_id'],
}),
  notes: many({
  sourceField: ['id'],
  destSchema: note,
  destField: ['user_id'],
}),
  createdJobs: many({
  sourceField: ['id'],
  destSchema: job,
  destField: ['created_by_id'],
})
}));


// Clients relationships
const clientRelationships = relationships(client, ({ one, many }) => ({
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_log,
  destField: ['loggable_id'],
}),
  people: many({
  sourceField: ['id'],
  destSchema: person,
  destField: ['client_id'],
}),
  jobs: many({
  sourceField: ['id'],
  destSchema: job,
  destField: ['client_id'],
}),
  devices: many({
  sourceField: ['id'],
  destSchema: device,
  destField: ['client_id'],
})
}));


// Jobs relationships
const jobRelationships = relationships(job, ({ one, many }) => ({
  client: one({
  sourceField: ['client_id'],
  destField: ['id'],
  destSchema: client,
}),
  createdBy: one({
  sourceField: ['created_by_id'],
  destField: ['id'],
  destSchema: user,
}),
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_log,
  destField: ['loggable_id'],
}),
  jobAssignments: many({
  sourceField: ['id'],
  destSchema: job_assignment,
  destField: ['job_id'],
}),
  jobPeople: many({
  sourceField: ['id'],
  destSchema: job_person,
  destField: ['job_id'],
}),
  tasks: many({
  sourceField: ['id'],
  destSchema: task,
  destField: ['job_id'],
}),
  notes: many({
  sourceField: ['id'],
  destSchema: note,
  destField: ['notable_id'],
}),
  scheduledDateTimes: many({
  sourceField: ['id'],
  destSchema: scheduled_date_time,
  destField: ['schedulable_id'],
})
}));


// Tasks relationships
const taskRelationships = relationships(task, ({ one, many }) => ({
  job: one({
  sourceField: ['job_id'],
  destField: ['id'],
  destSchema: job,
}),
  assignedTo: one({
  sourceField: ['assigned_to_id'],
  destField: ['id'],
  destSchema: user,
}),
  parent: one({
  sourceField: ['parent_id'],
  destField: ['id'],
  destSchema: task,
}),
  notes: many({
  sourceField: ['id'],
  destSchema: note,
  destField: ['notable_id'],
}),
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_log,
  destField: ['loggable_id'],
}),
  subtasks: many({
  sourceField: ['id'],
  destSchema: task,
  destField: ['parent_id'],
}),
  children: many({
  sourceField: ['id'],
  destSchema: task,
  destField: ['parent_id'],
})
}));


// People relationships
const personRelationships = relationships(person, ({ one, many }) => ({
  client: one({
  sourceField: ['client_id'],
  destField: ['id'],
  destSchema: client,
}),
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_log,
  destField: ['loggable_id'],
}),
  contactMethods: many({
  sourceField: ['id'],
  destSchema: contact_method,
  destField: ['person_id'],
}),
  devices: many({
  sourceField: ['id'],
  destSchema: device,
  destField: ['person_id'],
})
}));


// Devices relationships
const deviceRelationships = relationships(device, ({ one, many }) => ({
  client: one({
  sourceField: ['client_id'],
  destField: ['id'],
  destSchema: client,
}),
  person: one({
  sourceField: ['person_id'],
  destField: ['id'],
  destSchema: person,
}),
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_log,
  destField: ['loggable_id'],
})
}));


// Notes relationships
const noteRelationships = relationships(note, ({ one, many }) => ({
  notableJob: one({
  sourceField: ['notable_id'],
  destField: ['id'],
  destSchema: job,
}),
  notableTask: one({
  sourceField: ['notable_id'],
  destField: ['id'],
  destSchema: task,
}),
  notableClient: one({
  sourceField: ['notable_id'],
  destField: ['id'],
  destSchema: client,
}),
  user: one({
  sourceField: ['user_id'],
  destField: ['id'],
  destSchema: user,
})
}));


// Activity logs relationships
const activity_logRelationships = relationships(activity_log, ({ one, many }) => ({
  user: one({
  sourceField: ['user_id'],
  destField: ['id'],
  destSchema: user,
}),
  loggableJob: one({
  sourceField: ['loggable_id'],
  destField: ['id'],
  destSchema: job,
}),
  loggableTask: one({
  sourceField: ['loggable_id'],
  destField: ['id'],
  destSchema: task,
}),
  loggableClient: one({
  sourceField: ['loggable_id'],
  destField: ['id'],
  destSchema: client,
}),
  loggableUser: one({
  sourceField: ['loggable_id'],
  destField: ['id'],
  destSchema: user,
}),
  loggablePerson: one({
  sourceField: ['loggable_id'],
  destField: ['id'],
  destSchema: person,
}),
  client: one({
  sourceField: ['client_id'],
  destField: ['id'],
  destSchema: client,
}),
  job: one({
  sourceField: ['job_id'],
  destField: ['id'],
  destSchema: job,
})
}));


// Contact methods relationships
const contact_methodRelationships = relationships(contact_method, ({ one, many }) => ({
  person: one({
  sourceField: ['person_id'],
  destField: ['id'],
  destSchema: person,
})
}));


// Scheduled date times relationships
const scheduled_date_timeRelationships = relationships(scheduled_date_time, ({ one, many }) => ({
  schedulableJob: one({
  sourceField: ['schedulable_id'],
  destField: ['id'],
  destSchema: job,
}),
  schedulableTask: one({
  sourceField: ['schedulable_id'],
  destField: ['id'],
  destSchema: task,
}),
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_log,
  destField: ['loggable_id'],
}),
  scheduledDateTimeUsers: many({
  sourceField: ['id'],
  destSchema: scheduled_date_time_user,
  destField: ['scheduled_date_time_id'],
})
}));


// Job assignments relationships
const job_assignmentRelationships = relationships(job_assignment, ({ one, many }) => ({
  job: one({
  sourceField: ['job_id'],
  destField: ['id'],
  destSchema: job,
}),
  user: one({
  sourceField: ['user_id'],
  destField: ['id'],
  destSchema: user,
})
}));


// Job people relationships
const job_personRelationships = relationships(job_person, ({ one, many }) => ({
  job: one({
  sourceField: ['job_id'],
  destField: ['id'],
  destSchema: job,
}),
  person: one({
  sourceField: ['person_id'],
  destField: ['id'],
  destSchema: person,
})
}));


// Create the complete schema
export const schema = createSchema({
  tables: [
    activity_log,
    contact_method,
    job,
    client,
    device,
    job_assignment,
    job_person,
    job_target,
    note,
    person,
    scheduled_date_time_user,
    scheduled_date_time,
    task,
    task_completion,
    user
  ],
  relationships: [
    userRelationships,
    clientRelationships,
    jobRelationships,
    taskRelationships,
    personRelationships,
    deviceRelationships,
    noteRelationships,
    activity_logRelationships,
    contact_methodRelationships,
    scheduled_date_timeRelationships,
    job_assignmentRelationships,
    job_personRelationships
  ]
});

export type ZeroClient = Zero<typeof schema>;

// Table type exports for convenience

