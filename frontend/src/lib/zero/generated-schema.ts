// 🤖 AUTO-GENERATED ZERO SCHEMA
// Generated at: 2025-07-11T07:18:06Z
// 
// ⚠️  DO NOT EDIT THIS FILE DIRECTLY
// This file is automatically generated from your Rails schema.
// Any manual changes will be overwritten on the next generation.
//
// 🔧 FOR CUSTOMIZATIONS:
// 1. Create a separate file like 'custom-schema-extensions.ts'
// 2. Import and extend this schema in your application code
// 3. Use Zero's schema composition features for custom relationships
//
// 🔄 TO REGENERATE: Run `rails zero:generate_schema`
// 📚 DOCS: https://zero.rocicorp.dev/docs/schema

import {
  createSchema,
  table,
  string,
  number,
  boolean,
  json,
  relationships,
  type Zero
} from '@rocicorp/zero';

// Activity logs table
const activity_logs = table('activity_logs')
  .columns({
    action: string().optional(),
    loggable_type: string(),
    metadata: json().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    user_id: string().optional(),
    client_id: string().optional(),
    job_id: string().optional(),
    loggable_id: string().optional()
  })
  .primaryKey('id');


// Contact methods table
const contact_methods = table('contact_methods')
  .columns({
    value: string().optional(),
    formatted_value: string().optional(),
    contact_type: number().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    person_id: string().optional()
  })
  .primaryKey('id');


// Jobs table
const jobs = table('jobs')
  .columns({
    title: string().optional(),
    status: number().optional(),
    priority: number().optional(),
    created_at: number(),
    updated_at: number(),
    description: string().optional(),
    lock_version: number(),
    id: string(),
    client_id: string().optional(),
    created_by_id: string().optional(),
    due_at: number().optional(),
    due_time_set: boolean(),
    starts_at: number().optional(),
    start_time_set: boolean()
  })
  .primaryKey('id');


// Clients table
const clients = table('clients')
  .columns({
    name: string().optional(),
    client_type: string().optional(),
    created_at: number(),
    updated_at: number(),
    name_normalized: string().optional(),
    id: string()
  })
  .primaryKey('id');


// Devices table
const devices = table('devices')
  .columns({
    name: string().optional(),
    model: string().optional(),
    serial_number: string().optional(),
    location: string().optional(),
    notes: string().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    client_id: string().optional(),
    person_id: string().optional()
  })
  .primaryKey('id');


// Job assignments table
const job_assignments = table('job_assignments')
  .columns({
    created_at: number(),
    updated_at: number(),
    id: string(),
    job_id: string().optional(),
    user_id: string().optional()
  })
  .primaryKey('id');


// Job people table
const job_people = table('job_people')
  .columns({
    created_at: number(),
    updated_at: number(),
    id: string(),
    job_id: string().optional(),
    person_id: string().optional()
  })
  .primaryKey('id');


// Job targets table
const job_targets = table('job_targets')
  .columns({
    target_type: string(),
    status: string().optional(),
    instance_number: number(),
    reason: string().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    job_id: string().optional(),
    target_id: string().optional()
  })
  .primaryKey('id');


// Notes table
const notes = table('notes')
  .columns({
    notable_type: string(),
    content: string().optional(),
    created_at: number(),
    updated_at: number(),
    metadata: json().optional(),
    id: string(),
    user_id: string().optional(),
    notable_id: string().optional()
  })
  .primaryKey('id');


// People table
const people = table('people')
  .columns({
    name: string().optional(),
    notes: string().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    client_id: string().optional()
  })
  .primaryKey('id');


// Scheduled date time users table
const scheduled_date_time_users = table('scheduled_date_time_users')
  .columns({
    created_at: number(),
    updated_at: number(),
    id: string(),
    scheduled_date_time_id: string().optional(),
    user_id: string().optional()
  })
  .primaryKey('id');


// Scheduled date times table
const scheduled_date_times = table('scheduled_date_times')
  .columns({
    schedulable_type: string(),
    scheduled_type: string(),
    notes: string().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    schedulable_id: string().optional(),
    scheduled_at: number().optional(),
    scheduled_time_set: boolean()
  })
  .primaryKey('id');


// Tasks table
const tasks = table('tasks')
  .columns({
    title: string().optional(),
    status: number().optional(),
    position: number().optional(),
    created_at: number(),
    updated_at: number(),
    subtasks_count: number().optional(),
    reordered_at: number().optional(),
    lock_version: number(),
    applies_to_all_targets: boolean(),
    id: string(),
    job_id: string().optional(),
    assigned_to_id: string().optional(),
    parent_id: string().optional(),
    deleted_at: number().optional()
  })
  .primaryKey('id');


// Task completions table
const task_completions = table('task_completions')
  .columns({
    status: string(),
    completed_at: number().optional(),
    notes: string().optional(),
    created_at: number(),
    updated_at: number(),
    id: string(),
    task_id: string().optional(),
    job_target_id: string().optional(),
    completed_by_id: string().optional()
  })
  .primaryKey('id');


// Users table
const users = table('users')
  .columns({
    name: string().optional(),
    email: string().optional(),
    role: number().optional(),
    created_at: number(),
    updated_at: number(),
    password_digest: string().optional(),
    resort_tasks_on_status_change: boolean(),
    id: string()
  })
  .primaryKey('id');


// Users relationships
const usersRelationships = relationships(users, ({ one, many }) => ({
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_logs,
  destField: ['user_id'],
}),
  assignedJobs: many({
  sourceField: ['id'],
  destSchema: jobs,
  destField: ['assigned_to_id'],
}),
  assignedTasks: many({
  sourceField: ['id'],
  destSchema: tasks,
  destField: ['assigned_to_id'],
}),
  jobAssignments: many({
  sourceField: ['id'],
  destSchema: job_assignments,
  destField: ['user_id'],
}),
  scheduledDateTimeUsers: many({
  sourceField: ['id'],
  destSchema: scheduled_date_time_users,
  destField: ['user_id'],
}),
  notes: many({
  sourceField: ['id'],
  destSchema: notes,
  destField: ['user_id'],
}),
  createdJobs: many({
  sourceField: ['id'],
  destSchema: jobs,
  destField: ['created_by_id'],
})
}));


// Clients relationships
const clientsRelationships = relationships(clients, ({ one, many }) => ({
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_logs,
  destField: ['loggable_id'],
}),
  people: many({
  sourceField: ['id'],
  destSchema: people,
  destField: ['client_id'],
}),
  jobs: many({
  sourceField: ['id'],
  destSchema: jobs,
  destField: ['client_id'],
}),
  devices: many({
  sourceField: ['id'],
  destSchema: devices,
  destField: ['client_id'],
})
}));


// Jobs relationships
const jobsRelationships = relationships(jobs, ({ one, many }) => ({
  client: one({
  sourceField: ['client_id'],
  destField: ['id'],
  destSchema: clients,
}),
  createdBy: one({
  sourceField: ['created_by_id'],
  destField: ['id'],
  destSchema: users,
}),
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_logs,
  destField: ['loggable_id'],
}),
  jobAssignments: many({
  sourceField: ['id'],
  destSchema: job_assignments,
  destField: ['job_id'],
}),
  jobPeople: many({
  sourceField: ['id'],
  destSchema: job_people,
  destField: ['job_id'],
}),
  tasks: many({
  sourceField: ['id'],
  destSchema: tasks,
  destField: ['job_id'],
}),
  notes: many({
  sourceField: ['id'],
  destSchema: notes,
  destField: ['notable_id'],
}),
  scheduledDateTimes: many({
  sourceField: ['id'],
  destSchema: scheduled_date_times,
  destField: ['schedulable_id'],
})
}));


// Tasks relationships
const tasksRelationships = relationships(tasks, ({ one, many }) => ({
  job: one({
  sourceField: ['job_id'],
  destField: ['id'],
  destSchema: jobs,
}),
  assignedTo: one({
  sourceField: ['assigned_to_id'],
  destField: ['id'],
  destSchema: users,
}),
  parent: one({
  sourceField: ['parent_id'],
  destField: ['id'],
  destSchema: tasks,
}),
  notes: many({
  sourceField: ['id'],
  destSchema: notes,
  destField: ['notable_id'],
}),
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_logs,
  destField: ['loggable_id'],
}),
  subtasks: many({
  sourceField: ['id'],
  destSchema: tasks,
  destField: ['parent_id'],
}),
  children: many({
  sourceField: ['id'],
  destSchema: tasks,
  destField: ['parent_id'],
})
}));


// People relationships
const peopleRelationships = relationships(people, ({ one, many }) => ({
  client: one({
  sourceField: ['client_id'],
  destField: ['id'],
  destSchema: clients,
}),
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_logs,
  destField: ['loggable_id'],
}),
  contactMethods: many({
  sourceField: ['id'],
  destSchema: contact_methods,
  destField: ['person_id'],
}),
  devices: many({
  sourceField: ['id'],
  destSchema: devices,
  destField: ['person_id'],
})
}));


// Devices relationships
const devicesRelationships = relationships(devices, ({ one, many }) => ({
  client: one({
  sourceField: ['client_id'],
  destField: ['id'],
  destSchema: clients,
}),
  person: one({
  sourceField: ['person_id'],
  destField: ['id'],
  destSchema: people,
}),
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_logs,
  destField: ['loggable_id'],
})
}));


// Notes relationships
const notesRelationships = relationships(notes, ({ one, many }) => ({
  user: one({
  sourceField: ['user_id'],
  destField: ['id'],
  destSchema: users,
})
}));


// Activity logs relationships
const activity_logsRelationships = relationships(activity_logs, ({ one, many }) => ({
  user: one({
  sourceField: ['user_id'],
  destField: ['id'],
  destSchema: users,
}),
  client: one({
  sourceField: ['client_id'],
  destField: ['id'],
  destSchema: clients,
}),
  job: one({
  sourceField: ['job_id'],
  destField: ['id'],
  destSchema: jobs,
})
}));


// Contact methods relationships
const contact_methodsRelationships = relationships(contact_methods, ({ one, many }) => ({
  person: one({
  sourceField: ['person_id'],
  destField: ['id'],
  destSchema: people,
})
}));


// Scheduled date times relationships
const scheduled_date_timesRelationships = relationships(scheduled_date_times, ({ one, many }) => ({
  activityLogs: many({
  sourceField: ['id'],
  destSchema: activity_logs,
  destField: ['loggable_id'],
}),
  scheduledDateTimeUsers: many({
  sourceField: ['id'],
  destSchema: scheduled_date_time_users,
  destField: ['scheduled_date_time_id'],
})
}));


// Job assignments relationships
const job_assignmentsRelationships = relationships(job_assignments, ({ one, many }) => ({
  job: one({
  sourceField: ['job_id'],
  destField: ['id'],
  destSchema: jobs,
}),
  user: one({
  sourceField: ['user_id'],
  destField: ['id'],
  destSchema: users,
})
}));


// Job people relationships
const job_peopleRelationships = relationships(job_people, ({ one, many }) => ({
  job: one({
  sourceField: ['job_id'],
  destField: ['id'],
  destSchema: jobs,
}),
  person: one({
  sourceField: ['person_id'],
  destField: ['id'],
  destSchema: people,
})
}));


// Create the complete schema
export const schema = createSchema({
  tables: [
    activity_logs,
    contact_methods,
    jobs,
    clients,
    devices,
    job_assignments,
    job_people,
    job_targets,
    notes,
    people,
    scheduled_date_time_users,
    scheduled_date_times,
    tasks,
    task_completions,
    users
  ],
  relationships: [
    usersRelationships,
    clientsRelationships,
    jobsRelationships,
    tasksRelationships,
    peopleRelationships,
    devicesRelationships,
    notesRelationships,
    activity_logsRelationships,
    contact_methodsRelationships,
    scheduled_date_timesRelationships,
    job_assignmentsRelationships,
    job_peopleRelationships
  ]
});

export type ZeroClient = Zero<typeof schema>;

// Table type exports for convenience

