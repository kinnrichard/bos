// ü§ñ AUTO-GENERATED ZERO MUTATIONS
// Generated at: 2025-07-11T06:54:06Z
//
// ‚ö†Ô∏è  DO NOT EDIT THIS FILE DIRECTLY
// This file is automatically generated. Manual changes will be overwritten.
//
// üîß FOR CUSTOMIZATIONS:
// Use the corresponding .custom.ts file for your custom mutations
//
// üîÑ TO REGENERATE: Run `rails generate zero:mutations`


import { getZero } from './client';

// Generated TypeScript types for notes
// TypeScript interfaces for notes

/**
 * Complete Note record as stored in database
 */
export interface Note {
  notable_type: string;
  content?: string| null;
  created_at: number;
  updated_at: number;
  metadata?: any| null;
  id: string;
  user_id?: string| null;
  notable_id?: string| null;
}

/**
 * Data required to create a new note
 * Excludes auto-generated fields (id, created_at, updated_at)
 */
export interface CreateNoteData {
  notable_type: string;
  content?: string| null;
  metadata?: any| null;
  user_id?: string| null;
  notable_id?: string| null;
}

/**
 * Data for updating an existing note
 * All fields optional, excludes auto-managed fields
 */
export interface UpdateNoteData {
  notable_type?: string;
  content?: string| null;
  metadata?: any| null;
  user_id?: string| null;
  notable_id?: string| null;
}

/**
 * Standard response from mutation operations
 */
export interface NoteMutationResult {
  id: string;
}


// Generated CRUD mutations for notes

/**
 * Create a new note
 * 
 * @param data - The note data to create
 * @returns Promise resolving to the created note ID
 * 
 * @example
 * ```typescript
 * import { createNote } from './note';
 * 
 * const result = await createNote({
 *   // Add required fields here based on your schema
 * });
 * console.log('Created note with ID:', result.id);
 * ```
 */
export async function createNote(data: CreateNoteData): Promise<NoteMutationResult> {
  const zero = getZero();
  
  // Validate required fields
  if (!data.notable_type?.trim()) throw new Error('Notable type is required');
  // Generate unique ID with validation
  const id = crypto.randomUUID();
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('Failed to generate valid UUID');
  }

  const now = Date.now();

  try {
    await zero.mutate.notes.insert({
      id,
      ...data,
      created_at: now,
      updated_at: now,
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to create note: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Update an existing note
 * 
 * @param id - The UUID of the note to update
 * @param data - Partial note data for updates
 * @returns Promise resolving to the updated note ID
 * 
 * @example
 * ```typescript
 * import { updateNote } from './note';
 * 
 * const result = await updateNote('123e4567-e89b-12d3-a456-426614174000', {
 *   // Add fields to update
 * });
 * console.log('Updated note:', result.id);
 * ```
 */
export async function updateNote(id: string, data: UpdateNoteData): Promise<NoteMutationResult> {
  const zero = getZero();
  
  // Validate ID format
  if (!id || typeof id !== 'string') {
    throw new Error('Note ID is required and must be a string');
  }
  
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('Note ID must be a valid UUID');
  }

  // Validate that we have some data to update
  if (!data || Object.keys(data).length === 0) {
    throw new Error('Update data is required - at least one field must be provided');
  }

  const now = Date.now();

  try {
    await zero.mutate.notes.update({
      id,
      ...data,
      updated_at: now,
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to update note: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Delete a note (permanent deletion)
 * 
 * @param id - The UUID of the note to delete
 * @returns Promise resolving to the deleted note ID
 * 
 * @example
 * ```typescript
 * import { deleteNote } from './note';
 * 
 * const result = await deleteNote('123e4567-e89b-12d3-a456-426614174000');
 * console.log('Deleted note:', result.id);
 * ```
 * 
 * @warning This is a permanent deletion and cannot be undone
 */
export async function deleteNote(id: string): Promise<NoteMutationResult> {
  const zero = getZero();
  
  // Validate ID format
  if (!id || typeof id !== 'string') {
    throw new Error('Note ID is required and must be a string');
  }
  
  if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
    throw new Error('Note ID must be a valid UUID');
  }

  try {
    await zero.mutate.notes.delete({
      id
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to delete note: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}


/**
 * Create or update a note (upsert operation)
 * 
 * @param data - The note data with optional ID for update, without ID for create
 * @returns Promise resolving to the note ID (generated if creating, provided if updating)
 * 
 * @example
 * ```typescript
 * import { upsertNote } from './note';
 * 
 * // Create new note (no ID provided)
 * const newResult = await upsertNote({
 *   // Add required fields here
 * });
 * 
 * // Update existing note (ID provided)
 * const updateResult = await upsertNote({
 *   id: '123e4567-e89b-12d3-a456-426614174000',
 *   // Add fields to update
 * });
 * ```
 */
export async function upsertNote(data: (CreateNoteData & { id?: string }) | (UpdateNoteData & { id: string })): Promise<NoteMutationResult> {
  const zero = getZero();
  
  // Validate data is provided
  if (!data || Object.keys(data).length === 0) {
    throw new Error('Upsert data is required');
  }

  let id: string;
  const now = Date.now();

  // If ID is provided, validate it for update operation
  if (data.id) {
    if (!data.id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
      throw new Error('Note ID must be a valid UUID');
    }
    id = data.id;
  } else {
    // Generate new ID for create operation
    id = crypto.randomUUID();
    if (!id.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
      throw new Error('Failed to generate valid UUID');
    }
  }

  try {
    await zero.mutate.notes.upsert({
      ...data,
      id,
      updated_at: now,
      // Set created_at only if this is a new record
      ...(data.id ? {} : { created_at: now }),
    });

    return { id };
  } catch (error) {
    throw new Error(`Failed to upsert note: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

