# frozen_string_literal: true

require 'rails_helper'

RSpec.describe <%= class_name %>, type: :model do
<% if cache_test_scenarios.any? -%>
  describe "cache invalidation" do
<% cache_test_scenarios.each do |scenario| -%>
    let!(:<%= scenario[:parent_model].downcase %>) { create(:<%= scenario[:parent_model].downcase %>) }
    let!(:<%= file_name %>) { create(:<%= file_name %>, <%= scenario[:association] %>: <%= scenario[:parent_model].downcase %>) }
    
    it "touches <%= scenario[:parent_model].downcase %> when <%= file_name %> changes" do
      original_time = <%= scenario[:parent_model].downcase %>.updated_at
      
      travel 1.second do
        <%= file_name %>.update!(<%= scenario[:test_change] %>)
      end
      
      expect(<%= scenario[:parent_model].downcase %>.reload.updated_at).to be > original_time
    end
    
    it "touches <%= scenario[:parent_model].downcase %> when <%= file_name %> is destroyed" do
      original_time = <%= scenario[:parent_model].downcase %>.updated_at
      
      travel 1.second do
        <%= file_name %>.destroy!
      end
      
      expect(<%= scenario[:parent_model].downcase %>.reload.updated_at).to be > original_time
    end
<% end -%>
  end
<% else -%>
  # No automatic cache invalidation tests generated
  # Add cache invalidation tests if this model affects cached data
<% end -%>
end