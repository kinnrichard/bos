#!/usr/bin/env claude-flow
# Epic 015 Console Migration - Complete DRY Debug System Implementation

## TASK DESCRIPTION
Complete Epic 015 implementation by migrating 39 console.warn/error statements to the enhanced debug system with security filtering. The DRY architecture is complete - now implement the console migration in 3 phases.

## EXECUTION REQUIREMENTS
- Mode: coder | Sequential | Memory: epic_015_session
- Use TodoWrite for task tracking
- Test each migration thoroughly
- Maintain backward compatibility
- Apply security redaction to all migrated statements

## PHASE 1: PRODUCTION-CRITICAL FILES (HIGH PRIORITY)
**Target: 10 statements in critical business logic**

### 1.1 Authentication Layer (3 statements)
**File:** `/frontend/src/lib/api/auth.ts`
**Lines:** 18, 35, 50
**Namespace:** `debugAuth`
**Migration Pattern:**
```typescript
// BEFORE
console.error('Login failed:', error);

// AFTER  
import { debugAuth } from '$lib/utils/debug';
debugAuth.error('Login failed', { error });
```

### 1.2 Zero.js System (5 statements)
**Files:** `zero-config.ts`, `client.ts`, `zero-errors.ts`
**Lines:** 202, 207, 71, 155, 381
**Namespaces:** `debugDatabase`, `debugWebSocket`
**Migration Pattern:**
```typescript
// BEFORE
console.warn('CONNECTION_TIMEOUT is very low');

// AFTER
import { debugDatabase } from '$lib/utils/debug';
debugDatabase.warn('Connection timeout configuration low', { timeout });
```

### 1.3 Model Layer (2 statements)
**File:** `/frontend/src/lib/models/base/scoped-query-base.ts`
**Lines:** 398, 504
**Namespace:** `debugDatabase`
**Migration Pattern:**
```typescript
// BEFORE
console.error('Database query failed:', error);

// AFTER
import { debugDatabase } from '$lib/utils/debug';
debugDatabase.error('Database query failed', { error, query });
```

## PHASE 2: COMPONENT LAYER (MEDIUM PRIORITY)
**Target: 16 statements in UI components**

### 2.1 TaskList.svelte (8 statements)
**Lines:** 455, 538, 570, 619, 702, 870, 886, 1015
**Namespaces:** `debugWorkflow`, `debugComponent`
**Migration Pattern:**
```typescript
// BEFORE
console.error('Failed to create task:', error);

// AFTER
import { debugWorkflow } from '$lib/utils/debug';
debugWorkflow.error('Task creation failed', { error, taskData });
```

### 2.2 Other Components (8 statements)
**Files:** `JobDetailView.svelte`, `TaskInfoPopover.svelte`, etc.
**Namespaces:** `debugComponent`, `debugWorkflow`
**Migration Pattern:**
```typescript
// BEFORE
console.warn('Component state invalid:', state);

// AFTER
import { debugComponent } from '$lib/utils/debug';
debugComponent.warn('Component state invalid', { state, componentName });
```

## PHASE 3: UTILITY/SUPPORT FILES (LOW PRIORITY)
**Target: 13 statements in utility functions**

### 3.1 Utility Functions
**Files:** `popover-utils.ts`, login pages, etc.
**Namespaces:** `debugComponent`, `debugAuth`
**Migration Pattern:**
```typescript
// BEFORE
console.error('Popover positioning failed:', error);

// AFTER
import { debugComponent } from '$lib/utils/debug';
debugComponent.error('Popover positioning failed', { error, element });
```

## MIGRATION STRATEGY
1. **Preserve functionality** - maintain all existing error handling
2. **Add security redaction** - automatic sensitive data filtering via existing system
3. **Enhance debugging** - use .warn() and .error() methods for better categorization
4. **Maintain backward compatibility** - no breaking changes to existing debug usage

## IMPLEMENTATION REQUIREMENTS

### For Each Migration:
1. **Import appropriate debug namespace** from `$lib/utils/debug`
2. **Replace console.warn/error** with debug.warn/error
3. **Structure data objects** for better debugging
4. **Test security redaction** on sensitive data
5. **Verify production behavior** with debug namespace controls

### Namespace Mapping:
- **Authentication**: `debugAuth` 
- **Database/Zero.js**: `debugDatabase`
- **WebSocket**: `debugWebSocket`
- **Components**: `debugComponent`
- **Workflow/Tasks**: `debugWorkflow`
- **API calls**: `debugAPI`

## TESTING STRATEGY
- **Unit test** each migrated statement
- **Integration test** security redaction behavior
- **Production test** debug namespace controls
- **Backward compatibility** verification

## SUCCESS CRITERIA
- ✅ All 39 console.warn/error statements migrated
- ✅ Security redaction working on all statements
- ✅ Debug namespace controls functional
- ✅ Production logging behavior verified
- ✅ No breaking changes to existing debug usage

## EXECUTION COMMAND
```bash
./claude-flow sparc run coder "$(cat epic-015-console-migration.claude-flow)"
```

## MEMORY COORDINATION
Store progress in `epic_015_session` namespace:
- Migration progress by phase
- Security redaction test results
- Debug namespace usage patterns
- Production verification status

Execute systematically through all 3 phases, testing thoroughly at each step.