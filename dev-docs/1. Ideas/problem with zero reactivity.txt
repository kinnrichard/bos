Fix Zero Query Lifecycle Management

Problem

Zero is correctly sending data (143 clients visible in WebSocket logs) but queries return empty arrays
 because the frontend reactive query system is immediately destroying queries after creating them,
causing Zero to delete the data.

Root Cause

The createReactiveQuery wrapper or Zero query lifecycle management in Svelte components is causing
aggressive query cleanup.

Solution Steps

1. Investigate Frontend Query Management

- Examine createReactiveQuery implementation in generated model files
- Check how Zero queries are subscribed/unsubscribed in Svelte components
- Look for aggressive cleanup or disposal patterns

2. Fix Query Lifecycle Issues

- Ensure queries persist properly without being immediately destroyed
- Fix any reactive dependency issues causing query churn
- Implement proper query caching/persistence

3. Test Query Stability

- Verify queries stay active and return data consistently
- Confirm WebSocket shows stable data without deletion cycles
- Test that jobs page displays 148 jobs

4. Optimize Query Performance

- Implement proper query deduplication
- Add query result caching where appropriate
- Ensure efficient reactive updates

Expected Outcome

- Zero queries return actual data instead of empty arrays
- Jobs page displays 148 jobs from database
- WebSocket logs show stable data flow without deletion cycles

This is a frontend reactive query issue, not a Zero server/permissions problem.
