#!/bin/bash

# BOS Test Servers - Graceful startup with port conflict handling
# Starts Rails, Zero, and Frontend test servers on isolated ports

set -e

# Load test environment variables if .env.test exists
if [ -f ".env.test" ]; then
    export $(grep -v '^#' .env.test | xargs)
    echo "‚úÖ Loaded test environment variables"
fi

# Test server ports - use env vars if set, otherwise defaults
RAILS_TEST_PORT=${RAILS_TEST_PORT:-4000}
ZERO_TEST_PORT=${ZERO_TEST_PORT:-4850}  # Zero test port from config/zero.yml
FRONTEND_TEST_PORT=${FRONTEND_TEST_PORT:-6173}

# Set Zero upstream database for test environment
ZERO_UPSTREAM_DB=${ZERO_UPSTREAM_DB:-"postgresql://claude@localhost:5432/bos_test"}

# Set Zero auth secret to match config/zero.yml
ZERO_AUTH_SECRET=${ZERO_AUTH_SECRET:-"dev-secret-change-in-production"}

# Color codes for output
RED='\033[0;31m'
BLUE='\033[0;34m'  
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üß™ Starting BOS test servers..."

# Function to check if port is available
check_port() {
    local port=$1
    local service=$2
    
    if lsof -ti tcp:$port >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Port $port already in use (${service}), reusing existing server${NC}"
        echo "in_use"  # Return status via stdout
    else
        echo -e "${GREEN}‚úÖ Port $port available for ${service}${NC}"
        echo "available"  # Return status via stdout
    fi
}

# Check all ports and decide strategy  
echo "üîç Checking Rails port..."
rails_status=$(check_port $RAILS_TEST_PORT "Rails Test" | tail -1)
echo "üîç Rails check complete, status: $rails_status"

echo "üîç Checking Zero port..."
zero_status=$(check_port $ZERO_TEST_PORT "Zero Test" | tail -1)
echo "üîç Zero check complete, status: $zero_status"

echo "üîç Checking Frontend port..."
frontend_status=$(check_port $FRONTEND_TEST_PORT "Frontend Test" | tail -1)
echo "üîç Frontend check complete, status: $frontend_status"

# Build command array for concurrently
commands=()
names=()
colors=()

if [ "$rails_status" = "available" ]; then
    commands+=("RAILS_ENV=test ZERO_AUTH_SECRET=$ZERO_AUTH_SECRET bin/rails server -p $RAILS_TEST_PORT -b 0.0.0.0")
    names+=("rails-test")
    colors+=("red")
fi

# Start Zero server - REQUIRED for tests
if [ "$zero_status" = "available" ]; then
    if [ -z "$ZERO_UPSTREAM_DB" ]; then
        echo -e "${RED}‚ùå ZERO_UPSTREAM_DB not configured - tests cannot run without Zero server${NC}"
        echo "   Set ZERO_UPSTREAM_DB or check .env.test file"
        exit 1
    fi
    commands+=("ZERO_UPSTREAM_DB=$ZERO_UPSTREAM_DB ZERO_AUTH_SECRET=$ZERO_AUTH_SECRET npx zero-cache-dev --port $ZERO_TEST_PORT")
    names+=("zero-test") 
    colors+=("blue")
fi

if [ "$frontend_status" = "available" ]; then
    commands+=("cd frontend && npm run dev -- --port $FRONTEND_TEST_PORT")
    names+=("frontend-test")
    colors+=("green")
fi

# Debug: Show what we detected
echo "üîç Server status check:"
echo "   Rails (port $RAILS_TEST_PORT): $rails_status"
echo "   Zero (port $ZERO_TEST_PORT): $zero_status"  
echo "   Frontend (port $FRONTEND_TEST_PORT): $frontend_status"
echo "   Commands to start: ${#commands[@]}"

# Start servers if any need to be started
if [ ${#commands[@]} -gt 0 ]; then
    echo "üöÄ Starting ${#commands[@]} test server(s)..."
    
    # Build concurrently command with proper argument handling
    name_string=$(IFS=','; echo "${names[*]}")
    color_string=$(IFS=','; echo "${colors[*]}")
    
    # Use concurrently if available, otherwise start individually
    if command -v npx >/dev/null 2>&1; then
        # Create temporary array for concurrently arguments
        concurrent_args=()
        concurrent_args+=("-n" "$name_string")
        concurrent_args+=("-c" "$color_string")
        for cmd in "${commands[@]}"; do
            concurrent_args+=("$cmd")
        done
        
        npx concurrently "${concurrent_args[@]}"
    else
        echo "‚ö†Ô∏è  concurrently not found, falling back to sequential startup"
        for cmd in "${commands[@]}"; do
            echo "Starting: $cmd"
            eval "$cmd &"
        done
        wait
    fi
else
    echo -e "${GREEN}üéâ All test servers already running, ready for tests!${NC}"
    echo ""
    echo "üìã Test server endpoints:"
    echo "   Rails:    http://localhost:$RAILS_TEST_PORT"
    echo "   Zero:     http://localhost:$ZERO_TEST_PORT" 
    echo "   Frontend: http://localhost:$FRONTEND_TEST_PORT"
    echo ""
    echo "‚è≥ Monitoring test servers... (Press Ctrl+C to stop)"
    
    # Build list of ports to monitor (only those that should be running)
    monitor_ports=()
    
    # Add Rails port if it should be running
    if lsof -ti tcp:$RAILS_TEST_PORT >/dev/null 2>&1; then
        monitor_ports+=($RAILS_TEST_PORT)
    fi
    
    # Add Zero port if it should be running
    if lsof -ti tcp:$ZERO_TEST_PORT >/dev/null 2>&1; then
        monitor_ports+=($ZERO_TEST_PORT)
    fi
    
    # Add Frontend port if it should be running
    if lsof -ti tcp:$FRONTEND_TEST_PORT >/dev/null 2>&1; then
        monitor_ports+=($FRONTEND_TEST_PORT)
    fi
    
    if [ ${#monitor_ports[@]} -eq 0 ]; then
        echo "‚ö†Ô∏è  No servers found to monitor!"
        exit 1
    fi
    
    echo "üì° Monitoring ports: ${monitor_ports[*]}"
    
    # Keep the process alive by monitoring the servers
    while true; do
        sleep 30
        # Check if any monitored server died
        for port in "${monitor_ports[@]}"; do
            if ! lsof -ti tcp:$port >/dev/null 2>&1; then
                echo "‚ö†Ô∏è  Server on port $port stopped, exiting..."
                exit 1
            fi
        done
    done
fi