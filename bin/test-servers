#!/bin/bash

# BOS Test Servers - Graceful startup with port conflict handling
# Starts Rails, Zero, and Frontend test servers on isolated ports

set -e

# Test server ports (offset +1000 from dev) - use env vars if set
RAILS_TEST_PORT=${RAILS_TEST_PORT:-4000}
ZERO_TEST_PORT=${ZERO_TEST_PORT:-5848}  
FRONTEND_TEST_PORT=${FRONTEND_TEST_PORT:-6173}

# Color codes for output
RED='\033[0;31m'
BLUE='\033[0;34m'  
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üß™ Starting BOS test servers..."

# Function to check if port is available
check_port() {
    local port=$1
    local service=$2
    
    if lsof -ti tcp:$port >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Port $port already in use (${service}), reusing existing server${NC}"
        return 1  # Port in use
    else
        echo -e "${GREEN}‚úÖ Port $port available for ${service}${NC}"
        return 0  # Port available
    fi
}

# Check all ports and decide strategy  
check_port $RAILS_TEST_PORT "Rails Test"
rails_available=$?

check_port $ZERO_TEST_PORT "Zero Test" 
zero_available=$?

check_port $FRONTEND_TEST_PORT "Frontend Test"
frontend_available=$?

# Build command array for concurrently
commands=()
names=()
colors=()

if [ $rails_available -eq 0 ]; then  # 0 means port available
    commands+=("RAILS_ENV=test bin/rails server -p $RAILS_TEST_PORT -b 0.0.0.0")
    names+=("rails-test")
    colors+=("red")
fi

# Skip Zero server for now if not configured properly
if [ $zero_available -eq 0 ] && [ -n "$ZERO_UPSTREAM_DB" ]; then  # Only start if DB configured
    # Zero server - use official zero-cache-dev with port configuration
    commands+=("npx zero-cache-dev --port $ZERO_TEST_PORT")
    names+=("zero-test") 
    colors+=("blue")
elif [ $zero_available -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Skipping Zero server (ZERO_UPSTREAM_DB not configured)${NC}"
fi

if [ $frontend_available -eq 0 ]; then  # 0 means port available
    commands+=("cd frontend && npm run preview:test -- --port $FRONTEND_TEST_PORT")
    names+=("frontend-test")
    colors+=("green")
fi

# Start servers if any need to be started
if [ ${#commands[@]} -gt 0 ]; then
    echo "üöÄ Starting ${#commands[@]} test server(s)..."
    
    # Build concurrently command with proper argument handling
    name_string=$(IFS=','; echo "${names[*]}")
    color_string=$(IFS=','; echo "${colors[*]}")
    
    # Use concurrently if available, otherwise start individually
    if command -v npx >/dev/null 2>&1; then
        # Create temporary array for concurrently arguments
        concurrent_args=()
        concurrent_args+=("-n" "$name_string")
        concurrent_args+=("-c" "$color_string")
        for cmd in "${commands[@]}"; do
            concurrent_args+=("$cmd")
        done
        
        npx concurrently "${concurrent_args[@]}"
    else
        echo "‚ö†Ô∏è  concurrently not found, falling back to sequential startup"
        for cmd in "${commands[@]}"; do
            echo "Starting: $cmd"
            eval "$cmd &"
        done
        wait
    fi
else
    echo -e "${GREEN}üéâ All test servers already running, ready for tests!${NC}"
    echo ""
    echo "üìã Test server endpoints:"
    echo "   Rails:    http://localhost:$RAILS_TEST_PORT"
    echo "   Zero:     http://localhost:$ZERO_TEST_PORT" 
    echo "   Frontend: http://localhost:$FRONTEND_TEST_PORT"
    echo ""
    echo "‚è≥ Monitoring test servers... (Press Ctrl+C to stop)"
    
    # Keep the process alive by monitoring the servers
    while true; do
        sleep 30
        # Check if any server died and restart if needed
        for port in $RAILS_TEST_PORT $ZERO_TEST_PORT $FRONTEND_TEST_PORT; do
            if ! lsof -ti tcp:$port >/dev/null 2>&1; then
                echo "‚ö†Ô∏è  Server on port $port stopped, exiting..."
                exit 1
            fi
        done
    done
fi